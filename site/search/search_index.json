{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>The Jumio Software Development Kit (SDK) provides you with a set of tools and UIs (default or custom) to develop an Android application perfectly fitted to your specific needs.</p> <p>Onboard new users and easily verify their digital identities by making sure the IDs they provide are valid and authentic. Extract data from ID documents completely automatically and within seconds. Confirm that users really are who they say they are by having them take a quick selfie and match it to their respective documents. Jumio uses cutting-edge biometric technology such as 3D face mapping to make sure there is an actual, real-life person in front of the screen.</p> <p></p> <p>Using the Jumio SDK will allow you to create the best possible solution for your individual needs, providing you with a range of different services to choose from.</p>"},{"location":"#previous-sdk-versions","title":"Previous SDK Versions","text":"<p>If you need information on older SDK versions, please refer to:   - 3.9.2  - 3.9.1  - 3.9.0 </p>"},{"location":"#code-documentation","title":"Code Documentation","text":"<p>Full API documentation for the Jumio Android SDK can be found here.</p>"},{"location":"#quickstart","title":"Quickstart","text":"<p>This section provides a quick overview on how to get started with the Android sample application that can be found here on Github. You will need a commercial Jumio License to successfully run any of our examples; for details, contact sales@jumio.com. You will also need an up-to-date Android Studio version to open and try out the sample project.</p> <p>Start by downloading the Android sample application from the Jumio Github repo. You can either clone the repository (using SSH or HTTPS) to your local device or simply download everything as a ZIP.</p> <p>Once you\u2019ve got the sample application downloaded and unzipped, open Android Studio. Choose Import project and navigate to where you\u2019ve saved your sample application. Select the JumioMobileSample folder and open it.</p> <p>Android Studio will now start to import the project. This might take a bit of time. Make sure to wait until the Gradle Build has finished and the application is properly installed!</p> <p>The Android sample application contains the package <code>com.jumio.sample.kotlin</code>, which consists of:</p> <pre><code>MainActivity  \ncustomui  \n    CustomUIActivity    \n    CustomCountryAdapter    \n    CustomDocumentAdapter\n    CustomVariantAdapter\n</code></pre> <p>Right at the top of the <code>CustomUiActivity</code> you\u2019ll find a <code>companion object</code> with the following empty parameters:</p> <pre><code>const val EXTRA_TOKEN=\"sdk_token\"     \nconst val EXTRA_DATACENTER=\"datacenter\"\n</code></pre> <p>If you haven't done so already, please refer to the Authentication and Encryption section for more details on how to obtain your SDK token. Add your individual SDK token instead of the placeholder. The default setting for the data center is <code>JumioDataCenter.US</code>.</p> <p>\u26a0\ufe0f\u00a0\u00a0Note: We strongly recommend not storing any credentials inside your app! We suggest loading them during runtime from your server-side implementation.</p> <p>Once you start up the sample application, you'll be given the option of trying out the Jumio SDK. Click the hamburger menu in the top left corner to choose a service. Your application will also need camera permissions, which will be prompted for automatically once you try to start any of the services. If you deny camera permissions, you won't be able to use any of the services.</p>"},{"location":"#basics","title":"Basics","text":""},{"location":"#general-requirements","title":"General Requirements","text":"<p>\u26a0\ufe0f\u00a0\u00a0Android Deprecation Notice Please be aware that the upcoming SDK 4.7.0 will be the last SDK version supporting Android 5.0 (API level 21). All subsequent SDK versions will require at least Android 6.0 \"Marshmallow\" (API level 23).</p> <p>The minimum requirements for the SDK are:    - Android 5.0 \"Lollipop\" (API level 21) or higher    - Internet connection   - Jumio KYX    </p> <p>The following architectures are supported in the SDK:   -   ARMv7 processor with Neon     -   ARM64-v8a    </p> <p>\u2139\ufe0f\u00a0\u00a0Note: Currently, x86 and x86_64 are not supported. You get an UnsatisfiedLinkError if app and CPU architecture do not match or the CPU architecture is not supported.</p> <p>You will need a commercial Jumio License to run any of our examples. For details, contact sales@jumio.com.</p>"},{"location":"#authentication-and-encryption","title":"Authentication and Encryption","text":"<p>\u2139\ufe0f\u00a0\u00a0As of version 4.0.0 and onward, the SDK can only be used in combination with Jumio KYX. API v2 as well as using API token and secret to authenticate against the SDK will no longer be compatible.</p> <p>Before starting a session in our SDK, an SDK token has to be obtained. Please refer to out API Guide for further details. To authenticate against the API calls, an OAuth2 access token needs to be retrieved from the Customer Portal.</p> <p>Within the response of the Account Creation or Account Update API, a SDK token is returned, which needs to be applied to initiate the mobile SDK.</p>"},{"location":"#basic-authentication-deprecated","title":"Basic Authentication (Deprecated)","text":"<p>Previously, Basic Auth credentials were constructed using your API token as the User ID and your API secret as the password. You still can manage API token and secret in the Customer Portal under: * Settings &gt; API credentials &gt; API Users</p>"},{"location":"#authentication-with-oauth2","title":"Authentication with OAuth2","text":"<p>Your OAuth2 credentials are constructed using your API token as the Client ID and your API secret as the Client secret. You can view and manage your API token and secret in the Customer Portal under: * Settings &gt; API credentials &gt; OAuth2 Clients</p> <p>Client ID and Client secret are used to generate an OAuth2 access token. OAuth2 has to be activated for your account. Contact your Jumio Account Manager for activation.</p>"},{"location":"#access-token-url-oauth2","title":"Access Token URL (OAuth2)","text":"<ul> <li>US: <code>https://auth.amer-1.jumio.ai/oauth2/token</code></li> <li>EU: <code>https://auth.emea-1.jumio.ai/oauth2/token</code></li> <li>SG: <code>https://auth.apac-1.jumio.ai/oauth2/token</code></li> </ul> <p>The TLS Protocol is required to securely transmit your data, and we strongly recommend using the latest version. For information on cipher suites supported by Jumio during the TLS handshake see supported cipher suites.</p> <p>\u2139\ufe0f\u00a0\u00a0Note: Calls with missing, incorrect or suspicious headers or parameter values will result in HTTP status code 400 Bad Request Error or 403 Forbidden.</p>"},{"location":"#request-access-token-oauth2","title":"Request Access Token (OAuth2)","text":"<pre><code>curl --request POST --location 'https://auth.amer-1.jumio.ai/oauth2/token' \\\n    --header 'Accept: application/json' \\\n    --header 'Content-Type: application/x-www-form-urlencoded' \\\n    --data-raw 'grant_type=client_credentials' \\\n    --basic --user CLIENT_ID:CLIENT_SECRET\n</code></pre>"},{"location":"#response-access-token-oauth2","title":"Response Access Token (OAuth2)","text":"<pre><code>{\n  \"access_token\": \"YOUR_ACCESS_TOKEN\",\n  \"expires_in\": 3600,\n  \"token_type\": \"Bearer\"\n}\n</code></pre>"},{"location":"#access-token-timeout-oauth2","title":"Access Token Timeout (OAuth2)","text":"<p>Your OAuth2 access token is valid for 60 minutes. After the token lifetime is expired, it is necessary to generate a new access token.</p>"},{"location":"#workflow-transaction-token-timeout","title":"Workflow Transaction Token Timeout","text":"<p>The token lifetime is set to 30 minutes per default. It can be configured via the Jumio Customer Portal and can be overwritten using the API call (<code>tokenLifetime</code>). Within this token lifetime the token can be used to initialize the SDK.</p> <p>As soon as the workflow (transaction) starts, a 15 minutes session timeout is triggered. For each action performed (capture image, upload image) the session timeout will reset, and the 15 minutes will start again.</p> <p>After creating/updating a new account you will receive a <code>sdk.token</code> (JWT) for initializing the SDK. Use this SDK token with your Android code:</p> <pre><code>sdk = JumioSDK(context: Context).apply {\n  token = \"YOUR_SDK_TOKEN\"\n  dataCenter = \"YOUR_DATACENTER\"\n}\n</code></pre>"},{"location":"#permissions","title":"Permissions","text":"<p>The following permission is optional:</p> <pre><code>&lt;uses-permission android:name=\"android.permission.VIBRATE\"/&gt;\n</code></pre> <p>\u2139\ufe0f\u00a0\u00a0Note: On devices running Android Marshmallow (6.0) and above, you need to acquire <code>android.permissions.CAMERA</code> dynamically before initializing the SDK.</p> <p>Use <code>JumioSDK.hasAllRequiredPermissions(context: Context)</code> to make sure the Jumio SDK has all required permissions. In case this method returns <code>false</code>, use the method <code>JumioSDK.getMissingPermissions(context: Context)</code>, which will return an array list containing String values of all missing permissions. Request any missing permissions using the <code>ActivityCompat.requestPermissions()</code> method.</p>"},{"location":"#integration","title":"Integration","text":"<p>Use the SDK in your application by including the Maven repositories with the following <code>build.gradle</code> configuration in Android Studio:</p> <pre><code>repositories {\n    google()\n    mavenCentral()\n    exclusiveContent {\n        forRepository {\n            maven {\n                url 'https://repo.mobile.jumio.ai'\n            }\n        }\n        filter {\n            includeGroup \"com.jumio.android\"\n            includeGroup \"com.iproov.sdk\"\n        }\n    }\n}\n</code></pre> <p>Check the Android Studio sample projects to learn the most common use.</p>"},{"location":"#proguard","title":"Proguard","text":""},{"location":"#mandatory","title":"Mandatory","text":"<p>The following Proguard Keep rules have to be added to the Jumio Mobile SDK:</p> <pre><code>-keep class com.jumio.** { *; }\n-keep class jumio.** { *; }\n</code></pre>"},{"location":"#optional","title":"Optional","text":"<p>The following Proguard Keep rules have to be added to the Jumio Mobile SDK if the corresponding dependencies have been added:</p> <pre><code>#Microblink\n-keep class com.microblink.** { *; }\n-keep class com.microblink.**$* { *; }\n-dontwarn com.microblink.**\n\n#IProov\n-keep public class com.iproov.sdk.IProov {public *; }\n-keep class com.iproov.** { *; }\n-keep class com.iproov.**$* { *; }\n-keep class com.google.protobuf.** { *; }\n-keep class com.google.protobuf.**$* { *; }\n-dontwarn com.google.protobuf.**\n-dontwarn com.tinder.**\n-dontwarn okhttp3.**\n-dontwarn okio.**\n\n#JMRTD\n-keep class org.jmrtd.** { *; }\n-keep class net.sf.scuba.** {*;}\n-keep class org.bouncycastle.** {*;}\n-keep class org.ejbca.** {*;}\n-dontwarn java.nio.**\n-dontwarn org.codehaus.**\n-dontwarn org.ejbca.**\n-dontwarn org.bouncycastle.**\n-dontwarn module-info\n</code></pre> <p>Most of the Proguard settings are applied automatically, as they are defined as consumer Proguard rules within the SDK. The current rules can also be found in the Sample app.</p>"},{"location":"#language-localization","title":"Language Localization","text":"<p>Our SDK supports default Android localization features for different languages. All label texts and button titles in the SDK can be changed and localized by adding the required Strings you want to change in a <code>strings.xml</code> file in a <code>values</code> directory for the language and culture preference that you want to support. You can check out strings that are modifiable within our Sample application.</p> <p>Jumio SDK products support the following languages:</p> <p>Afrikaans, Arabic, Bulgarian, Chinese(Simplified), Chinese(Traditional), Croatian, Czech, Danish, Dutch, Estonian, English, Finnish, French, German, Greek, Hindi, Hungarian, Indonesian, Italian, Japanese, Khmer, Korean, Latvian, Lithuanian, Maltese, Norwegian, Polish, Portuguese, Romanian, Russian, Slovak, Slovenian, Spanish, Swedish, Thai, Turkish, Vietnamese, Zulu</p> <p>Our SDK supports accessibility features. Visually impaired users can now enable TalkBack or increase the text size on their device. The accessibility strings that are used by TalkBack contain accessibility in their key and can be also modified in <code>strings.xml</code>.</p>"},{"location":"#document-verification","title":"Document Verification","text":"<p>As of Android SDK 4.3.0, Document Verification functionality is available. This functionality allows users to submit a number of different document types (e.g. a utility bill or bank statement) in digital form and verify the validity and authenticity of this document.</p> <p>Documents can be submitted using one of two ways: Taking a photo of the document or uploading a PDF file. For more details, please refer to our integration guide.</p>"},{"location":"#supported-documents","title":"Supported Documents:","text":"<ul> <li>BC (Birth certificate)</li> <li>BS (Bank statement)</li> <li>CAAP (Cash advance application)</li> <li>CB (Council bill)</li> <li>CC (Credit card)</li> <li>CCS (Credit card statement)</li> <li>CRC (Corporate resolution certificate)</li> <li>CUSTOM</li> <li>HCC (Health care card)</li> <li>IC (Insurance card)</li> <li>LAG (Lease agreement)</li> <li>LOAP (Loan application)</li> <li>MEDC (Medicare card)</li> <li>MOAP (Mortgage application)</li> <li>PB (Phone bill)</li> <li>SEL (School enrollment letter)</li> <li>SENC (Seniors card)</li> <li>SS (Superannuation statement)</li> <li>SSC (Social security card)</li> <li>STUC (Student card)</li> <li>TAC (Trade association card)</li> <li>TR (Tax return)</li> <li>UB (Utility bill)</li> <li>VC (Voided check)</li> <li>VT (Vehicle title)</li> <li>WWCC (Working with children check)</li> </ul> <p>\u2139\ufe0f\u00a0\u00a0Note: To enable the use of this feature, please contact Jumio support.</p>"},{"location":"#digital-identity","title":"Digital Identity","text":"<p>As of Jumio Android SDK 4.5.0, users may use their Digital Identity to verify their identity. For now 'ID by Mastercard' is the only Digital Identity provider currently supported by our SDK.</p> <p>If you want to enable Digital Identity verification for your account please contact us. In case you are already set up to use Digital Identity verification within your app, check out the integration steps explained here.</p>"},{"location":"#analytics-with-datadog","title":"#Analytics With Datadog","text":"<p>Analytic feedback and diagnostics enable us to continually improve our SDK and its performance, as well as investigate potential issues. With the Jumio SDK, we use Datadog as an optional tool to collect diagnostic information. Data collected includes specific SDK information like version numbers, started and finished SDK instances and scan workflows, thrown exceptions and error information, as well as other mobile events. Please note that gathering analytics data requires user consent due to legal regulations such as GDPR. The consent is granted when our MLA is accepted.</p> <p>To benefit from Datadog, add the following dependency to your <code>build.gradle</code> file:</p> <pre><code>implementation \"com.jumio.android:datadog:${SDK_VERSION}\"\n</code></pre> <p>To grant or revoke user consent, please use <code>JumioSDK.giveDataDogConsent(boolean)</code> method.</p> <p>\u26a0\ufe0f\u00a0\u00a0Note: The use of the Datadog module is only possible if it is not already included in your application.</p>"},{"location":"#security","title":"Security","text":"<p>All SDK related traffic is sent over HTTPS using TLS and public key pinning. Additionally, the information itself within the transmission is also encrypted utilizing Application Layer Encryption (ALE). ALE is a Jumio custom-designed security protocol that utilizes RSA-OAEP and AES-256 to ensure that the data cannot be read or manipulated even if the traffic was captured.</p>"},{"location":"#release-notes","title":"Release Notes","text":"<p>See our Change Log for more information about our current SDK version and further details.</p>"},{"location":"#maintenance-and-support","title":"Maintenance and Support","text":"<p>Please refer to our SDK maintenance and support policy for more information about Mobile SDK maintenance and support.</p>"},{"location":"#two-factor-authentication","title":"Two-factor Authentication","text":"<p>If you want to enable two-factor authentication for your Jumio Customer Portal, contact us. Once enabled, users will be guided through the setup upon their first login to obtain a security code using the Google Authenticator app.</p>"},{"location":"#licenses","title":"Licenses","text":"<p>The software contains third-party open source software. For more information, see licenses.</p> <p>This software is based in part on the work of the Independent JPEG Group.</p>"},{"location":"#contact","title":"Contact","text":"<p>If you have any questions regarding our implementation guide please contact Jumio Customer Service at support@jumio.com. The Jumio online helpdesk contains a wealth of information regarding our services including demo videos, product descriptions, FAQs, and other resources that can help to get you started with Jumio.</p>"},{"location":"#copyright","title":"Copyright","text":"<p>\u00a9 Jumio Corporation, 395 Page Mill Road, Suite 150, Palo Alto, CA 94306</p> <p>The source code and software available on this website (\u201cSoftware\u201d) is provided by Jumio Corp. or its affiliated group companies (\u201cJumio\u201d) \"as is\u201d and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. In no event shall Jumio be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including but not limited to procurement of substitute goods or services, loss of use, data, profits, or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this Software, even if advised of the possibility of such damage. In any case, your use of this Software is subject to the terms and conditions that apply to your contractual relationship with Jumio. As regards Jumio\u2019s privacy practices, please see our privacy notice available here: Privacy Policy.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#change-log","title":"Change Log","text":"<p>All notable changes, such as SDK releases, updates and fixes, are documented in this file. For detailed technical changes please refer to our Transition Guide.</p>"},{"location":"changelog/#support-period","title":"Support Period","text":"<p>Current SDK version: 4.6.0</p> <p>Please refer to our SDK maintenance and support policy for more information about Mobile SDK maintenance and support.</p>"},{"location":"changelog/#sdk-version-460","title":"SDK Version: 4.6.0","text":"<p> Added Jumio Liveness module to enhance the Liveness user experience and interface (Identity Verification)</p> <p> Improved Liveness customization options (Identity Verification)</p>"},{"location":"changelog/#sdk-version-450","title":"SDK Version: 4.5.0","text":"<p> Added possibility for users to verify their identity using Digital Identity [ID Verification, Identity Verification]</p> <p> iProov SDK version update to 8.3.1 [Identity Verification]</p> <p> Improved user consent handling [ID Verification, Identity Verification]</p> More details         ### User consent User consent is now acquired for all users to ensure the accordance with biometric data protection laws. Please also refer to the [User Consent section](integration_faq.md#user-consent) in our FAQ.  <p> Bug fixes: UI bugs, passport scanning issue for certain countries [ID Verification]</p>"},{"location":"changelog/#sdk-version-441","title":"SDK Version: 4.4.1","text":"<p> Bug fix: Internal crashes for certain edge cases</p>"},{"location":"changelog/#sdk-version-440","title":"SDK Version: 4.4.0","text":"<p> Fully redesigned ID Autocapture experience - seamless capturing, precise guidance and faster user journey [ID Verification]</p> <p> Major iProov SDK version update to 8.0.3 - no more face scanning filter, improved UI and more customization options [Identity Verification]</p> <p> Mandatory NFC scanning option [ID Verification]</p> <p> Bug fixes: UI bugs, internal crashes</p>"},{"location":"changelog/#sdk-version-430","title":"SDK Version: 4.3.0","text":"<p> Autocapture functionality (introduced in SDK 4.2.0) is no longer in beta stage [ID Verification]</p> <p> Document Verification functionality added</p> <p> Improved user guidance: Clear distinction between scanning frontside or backside of ID document [ID Verification]</p> <p> iProov SDK version update to 7.5.0 [Identity Verification]</p> <p> The SDK's minSdkVersion has been increased to 21 (Lollipop). Please check the Transition Guide for details.</p> <p> UI bugs, internal crashes [Identity Verification]</p>"},{"location":"changelog/#sdk-version-420","title":"SDK Version: 4.2.0","text":"<p> Alignment of previously existing scanning method and improved user experience through addition of Autocapture module (Beta) [ID Verification]</p> <p> Support for device fingerprint capability [ID Verification, Identity Verification]</p> <p> Addition of NFC image extraction for similarity check [ID Verification]</p> <p> Improved liveness customization: Centered Floating prompt for better user guidance during face scanning [Identity Verification]</p> <p> Bug fixes: UI bugs, internal crashes</p>"},{"location":"changelog/#sdk-version-410","title":"SDK Version: 4.1.0","text":"<p> Improved, granular user feedback for improved user experience and workflow through addition of Instant Feedback [ID Verification, Identity Verification]</p> <p> Support for Dark Mode for DefaultUI and CustomUI [ID Verification, Identity Verification]</p> <p> Addition of optional Datadog diagnostics module for monitoring SDK behavior and performance, as well as more efficient troubleshooting</p> <p> iProov SDK version update to 7.2.0 [Identity Verification]</p> <p> Bug fixes: UI bugs, security improvements, internal crashes</p>"},{"location":"changelog/#sdk-version-400","title":"SDK Version: 4.0.0","text":"<p>This is a complete rewrite of our SDK. The SDK was built with CustomUI as a basis and restructured to align Android and iOS to reduce overall complexity and integration effort.</p> <p> Improved security by switching to one-time authorization tokens for SDK initialization instead of relying on API token and secret</p> <p> Redesigned Default UI flow</p> <p> Slimline SDK configuration of only 1.8 MB size</p> <p> Improved data extraction via enhancing the SDK capabilities with server-side extraction capabilities</p> <p> Manual capture is now available as a fallback option for all other capture methods</p>"},{"location":"changelog/#sdk-version-392","title":"SDK Version: 3.9.2","text":"<p> iProov SDK version update to 6.4.1, which improves performance and offers additional customization options  [Identity Verification]</p>"},{"location":"changelog/#sdk-version-391","title":"SDK Version: 3.9.1","text":"<p> iProov SDK version update to 6.3.1, which fixes cross-dependency problems with OkHttp 4.x versions [Identity Verification]</p> <p> Improved customization options [Identity Verification]</p>"},{"location":"changelog/#sdk-version-390","title":"SDK Version: 3.9.0","text":"<p> Improved SDK lifecycle and state handling to reduce specific scenarios in which SDK crashes could have happened [Identity Verification]</p> <p> Improved retry guidance for Identity Verification [Identity Verification]</p> <p> Improved customization options [Identity Verification]</p> <p> Added more granular differentiations for <code>ScanMode</code> in CustomUI [Identity Verification]</p> <p> Fixed rare issue that caused \"Blur Hint\" toast being displayed multiple times on certain devices [Identity Verification]</p> <p> Fixed possible Camera Exception using CustomUI [ID Verification/Fastfill, Identity Verification, Authentication]</p> <p> Fixed possible app crash when calling <code>NetverifyCustomSDKController.retry()</code> [ID Verification/Fastfill, Identity Verification]</p> <p> Fixed Zoom Authentication 412 error handling, preventing user from getting stuck in certain scenarios [Identity Verification]</p> <p> Removed deprecated Android Kotlin plugins [ID Verification/Fastfill, Identity Verification, Authentication, Document Verification]</p> <p> iProov SDK version update to 6.3.0, which includes accuracy improvements using Liveness Assurance [Identity Verification]</p>"},{"location":"changelog/#sdk-version-380","title":"SDK Version: 3.8.0","text":"<p> Added better guidance for devices with a fixed focal distance [ID Verification/Fastfill, Document Verification]</p> <p> Fixed crashes that could occur in edge cases [ID-Verification, Identity-Verification]</p> <p> Added iProov as an additional liveness vendor to the Jumio KYX platform [Identity Verification]</p>"},{"location":"changelog/#sdk-version-373","title":"SDK Version: 3.7.3","text":"<p> New error code is returned in case an ad blocker or a firewall is detected [ID Verification/Fastfill, Authentication, Document Verification]</p> <p> Added additional 3D Liveness customization options [ID Verification, Authentication]</p> <p> Fixed stroke color customization on negative action button [ID Verification/Fastfill, Authentication, Document Verification]</p> <p> Fixed compatibility issues caused by Firebase Performance Plugin.</p>"},{"location":"changelog/#sdk-version-372","title":"SDK Version: 3.7.2","text":"<p> Fixed a problem that face could not be captured anymore in certain cases [ID Verification Custom UI]</p>"},{"location":"changelog/#sdk-version-371","title":"SDK Version: 3.7.1","text":"<p> Fixed problem in handling the user consent [ID Verification, Authentication]</p>"},{"location":"changelog/#sdk-version-370","title":"SDK Version: 3.7.0","text":"<p> Full redesign of NFC passport workflow [ID Verification]</p> <p> Update to newest 3D Liveness technology [ID Verification, Authentication]</p> <p> Adjusted Jumio logo and default color to reflect new Jumio appearance [ID Verification/Fastfill, Authentication, Document Verification]</p> <p> Support of 24 new languages [ID Verification/Fastfill, Authentication, Document Verification]</p> <p> Possibility to retrieve the captured images directly in the SDK [ID Verification/Fastfill]</p>"},{"location":"changelog/#sdk-version-362","title":"SDK Version: 3.6.2","text":"<p> Security enhancements [Netverify/Fastfill, Authentication, Document Verification, BAM Checkout]</p>"},{"location":"changelog/#sdk-version-361","title":"SDK Version: 3.6.1","text":"<p> Fixed wrong date parsing on magstripe encoded barcodes [Netverify/Fastfill]</p>"},{"location":"changelog/#sdk-version-360","title":"SDK Version: 3.6.0","text":"<p> Added support for right-to-left languages [Netverify/Fastfill, Authentication, Document Verification]</p> <p> Provide access to document guidance animation [Netverify Custom UI]</p> <p> Advanced custom UI sample implementation [Netverify Custom UI Sample]</p> <p> Adjusted handling of document types which don\u2019t support plastic documents [Netverify]</p> <p> Support for 5 new languages (Czech, Greek, Hungarian, Polish, Romanian) [Netverify/Fastfill, Authentication, Document Verification]</p> <p> Improved accessibility handling [Netverify/Fastfill, Authentication, Document Verification]</p> <p> Reduced SDK size by ~1.5 MB [Netverify/Fastfill, Authentication, Document Verification, BAM Checkout]</p> <p> Various smaller bug fixes/improvements [Netverify/Fastfill, Authentication, Document Verification]</p>"},{"location":"changelog/#contact","title":"Contact","text":"<p>If you have any questions regarding our implementation guide please contact Jumio Customer Service at support@jumio.com. The Jumio online helpdesk contains a wealth of information regarding our service including demo videos, product descriptions, FAQs and other things that may help to get you started with Jumio. Check it out at here.</p>"},{"location":"integration_faq/","title":"FAQ","text":""},{"location":"integration_faq/#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"integration_faq/#user-consent","title":"User Consent","text":"<p>User consent is now acquired for all users to ensure the accordance with biometric data protection laws. Depending on the legal requirements, consent can be acquired in one of two ways: Active or passive.</p> <p>For active consent instances, the user needs to accept the consent items explicitly, e.g. by enabling a UI switch or checking a checkbox for each consent item. For passive consent instances, it is enough to present the consent text and URL to the user. The user implicitly accepts the passive consent items by continuing with the journey.</p> <p> </p>"},{"location":"integration_faq/#improve-user-experience-and-reduce-drop-off-rate","title":"Improve User Experience and Reduce Drop-off Rate","text":"<p>When evaluating user flows, one of the most commonly used metrics is the rate of drop-offs. At Jumio, we see considerable variance in drop-off rates across industries and customer implementations. For some implementations and industries, we see a higher rate of drop-offs on the first screens when compared with the average. Scanning an ID with sensitive personal data printed on it naturally creates a high barrier for participation on the part of the end user. Therefore, conversion rates can be significantly influenced when the application establishes a sense of trust and ensures that users feel secure sharing their information.</p> <p>One pattern that is recognizable throughout all of our customers\u2019 SDK implementations: the more seamless the SDK integration, and the better job is done of setting user expectations prior to the SDK journey, the lower the drop-off rate becomes.</p> <p>Our SDK provides a variety of customization options to help customers achieve a seamless integration. For customers using the standard SDK workflow, our Surface tool provides an easy-to-use WYSIWYG interface to see simple customization options that can be incorporated with minimal effort and generate the code necessary to implement them. For customers who want to have more granular control over look and feel, our SDK offers the CustomUI option, which allows you to customize the entire user interface.</p>"},{"location":"integration_faq/#example-of-a-non-ideal-sdk-integration","title":"Example of a Non-Ideal SDK integration:","text":"<p> - Default SDK UI is used and is presented on one of the first screens during onboarding. The user is unprepared for the next steps and might not understand the intention behind the request to show their ID.</p>"},{"location":"integration_faq/#suggested-improvements-with-additional-customization","title":"Suggested Improvements with Additional Customization:","text":"<p>  - Host application has an explanatory help screen that explains what will happen next and why this information is needed.  - SDK is either customized to have a more embedded appearance or CustomUI is used to create a completely seamless integration in the UX of our customers.  - Also after the Jumio workflow that shows the displayed results and/or a message that the ID is currently verified, which might take some minutes.</p>"},{"location":"integration_faq/#managing-errors","title":"Managing Errors","text":"<p>Not every error that is returned from the SDK should be treated the same. The error codes listed for ID Verification should be handled specifically.</p> <p>The following table highlights the most common error codes which are returned from the SDK and explains how to handle them appropriately in your application.</p> Code Cause Recommended Handling A[xx][yyyy] Caused by temporary network issues like a slow connection. Advise to check the signal and retry the SDK journey. E[xx][yyyy] Flight mode is activated or no connection available. The user should be asked to disable flight mode or to verify if the phone has proper signal. Advise to connect to WIFI and retry the SDK journey afterwards. G[xx][0000] The user pressed back or X to exit the SDK while no error view was presented. Reasons for this could be manifold. Often it might be due to the fact that the user didn't have his identity document at hand. Give the user the option to retry. J[xx][yyyy] The SDK journey was not completed within the session's max. lifetime. (The default is 15 minutes.) The user should be informed about the timeout and be directed to start a new Jumio SDK session."},{"location":"integration_faq/#ad-blockers-or-firewall","title":"Ad Blockers or Firewall","text":"<p>End users might face the situation where they are connected to a network that can't reach our Jumio endpoints.</p> <p>Possible reasons for this might be ad blockers on the device, network wide ad blockers or network specific firewall settings. In these cases the SDK will return a specific error code: A10900 If this error is received, we suggest to add a screen where the user is advised to switch network and/or turn off possible ad blockers.</p>"},{"location":"integration_faq/#reducing-the-size-of-your-app","title":"Reducing the Size of Your App","text":"<p>The Netverify SDK contains a wide range of different scanning methods. The SDK is able to capture identity documents and extract information on the device using enhanced machine learning and computer vision technologies. The current download size of the sample application containing all products is around 12.5 MB as mentioned in the ID Verification guide. If you want to reduce the size of the SDK within your application, there are several ways to achieve this:</p>"},{"location":"integration_faq/#strip-unused-modules","title":"Strip Unused Modules","text":"<p>Depending on your specific needs, you may want to strip out unused functionality. As most of our modules can be linked optionally, you can reduce file size by adapting your Jumio dependencies in your build.gradle.</p> <p>The following table shows a range of different product configurations with the size and modules that are linked for it. These measurements reflect the extra size that Jumio components add to your app download size and are based on our sample application.</p> Product Configuration Size Modules Base 2.68 MB core Base + iProov 3.51 MB core, iproov Base + MRZ 4.19 MB core, mrz Base + MRZ, Linefinder 4.57 MB core, mrz, linefinder Base + MRZ, Linefinder, Barcode 5.62 MB core, mrz, linefinder, barcode Base + MRZ, Linefinder, Barcode-Vision 4.89 MB core, mrz, linefinder, barcode-vision Base + MRZ, Linefinder, Barcode, iProov 6.45 MB core, mrz, linefinder, barcode, iproov Base + MRZ, Linefinder, Barcode, Liveness 8.93 MB core, mrz, linefinder, barcode, liveness Base + MRZ, Linefinder, Barcode, NFC 7.26 MB core, mrz, linefinder, barcode, nfc All (Custom UI only) 13.07 MB core, mrz, linefinder, barcode, barcode-vision, iproov, nfc, docfinder, devicerisk, liveness Base + MRZ, Linefinder, Default UI 4.92 MB core, mrz, linefinder, default-ui Base + MRZ, Linefinder, Default UI, DataDog 5.09 MB core, mrz, linefinder, default-ui, datadog All (with Default UI) 13.58 MB core, mrz, linefinder, barcode, barcode-vision, iproov, nfc, docfinder, devicerisk, default-ui, datadog, liveness <p>Note:  The size values in the table above depict the decompressed install size required on a device and are comparable to the estimated Play Store files size. The size value might vary by a few percent, depending on the actual device used. All sizes are calculated based on a build of our sample application using arm64 architecture, english translations and xxhdpi screen resolution.</p>"},{"location":"integration_faq/#app-bundles","title":"App Bundles","text":"<p>Android offers a way to reduce the size of a customer's built application using App bundles Google Play\u2019s new app serving model uses the App bundle to generate and serve optimized APKs for each user\u2019s device configuration, so they download only the code and resources they need to run your app.</p>"},{"location":"integration_faq/#architectures-abi-filters-splitting","title":"Architectures, ABI Filters &amp; Splitting","text":"<p>The SDK supports armeabi-v7a and arm64-v8a architecture. You can filter which architecture to use by specifying the abiFilters. That way, you could manually filter for armeabi-v7a as arm64-v8a.</p> <p>Be aware: As of August 2019, Google Play Console will require that new apps and app updates with native libraries provide 64-bit versions in addition to their 32-bit versions, as mentioned in the Android developers blog..</p> <p>Note: The abiFilters command in the ndk closure affects the Google Play Store filtering.</p> <pre><code>defaultConfig {\n    ndk {\n        abiFilters armeabi-v7a\",\"arm64-v8a\",\"x86\",\"x86_64\"\n    }\n}\n</code></pre> <p>It's also possible to manually provide a split apk on Google Play. The apk can be split based on the architecture if multiple apks should be uploaded to the Google Play Store. Google Play Store manages to deliver the appropriate apk for the device.</p> <pre><code>splits {\n    abi {\n        enable true\n        reset()\n        include armeabi-v7a\",\"arm64-v8a\",\"x86\",\"x86_64\"\n        universalApk false\n    }\n}\n</code></pre>"},{"location":"integration_faq/#jumio-authentication-workflow-integration","title":"Jumio Authentication Workflow Integration","text":"<p>Jumio Authentication can be used for any use case in which you want your end-users to confirm their identities. As a result of the Authentication journey you get a success or failed result back from the SDK or from our server (callback or retrieval).</p> <p>In case of a successful result you can grant the user access to your service or let him proceed with the user flow. In case of a failed result, a proper retry handling within your workflow is necessary. A failure could occur because of the following reasons: * The user presenting their face is a different one than the user who owns the account * An imposter is trying to spoof the liveness check * User does not want to show their face at all, but is still trying to complete the onboarding * User does not look straight into the camera * User does not finish the first or second step of face scan * User has bad lighting conditions (too dark, too bright, reflections on face, not enough contrast, \u2026) * User is covering (parts) of their face with a scarf, hat or something similar * A different person is scanning their face in the second step than in the first one * User is not able to align his face with the oval presented during scanning</p> <p>In case an Authentication fail is returned, we recommend to allow the user between 3-5 Authentication attempts to prove their identity, before you lock the user from performing the action. This approach makes the most sense, as you don't want to lock out possible valid users who might not have completed the face capture task successfully for a legitimate reason. Don't worry about offering a potential fraudster more attempts to gain access to your system - our bullet proof liveness check does not allow them to get a successful result.</p>"},{"location":"integration_faq/#fallback-and-manual-capturing","title":"Fallback and Manual Capturing","text":"<p>The method <code>isFallbackAvailable()</code> determines if a fallback for the current scan mode is available and returns a boolean. If the method returns true, the available fallback scan mode will have to be started with the method <code>startFallback()</code>.</p> <p>The method <code>showShutterButton()</code> determines if a shutter button needs to be shown because the image has to be taken manually and returns a boolean. If the method returns true, you will have to display your own shutter button and call the method <code>takePicture()</code> once it is clicked.</p> <p>Note: Please note that the method <code>showShutterButton()</code> does neither create nor display the actual shutter button!</p> <p>\"Manual capturing\" simply refers to the user being able to manually take a picture. \"Fallback\" refers to an alternative scan mode the SDK can resort to if possible, in case there is an issue during the original scanning process. The fallback scan mode might be manual capturing in some cases, but not all.</p>"},{"location":"integration_faq/#custom-theme","title":"Custom Theme","text":""},{"location":"integration_faq/#custom-theme-is-not-working","title":"Custom Theme Is Not Working","text":"<p>Any customized theme needs to be defined in a <code>styles.xml</code> file and has to inherit from the parent theme <code>Theme.Jumio</code>.</p> <pre><code>&lt;style name=\"AppTheme.JumioCustom\" parent=\"Theme.Jumio\"&gt;\n  &lt;item name=\"colorPrimary\"&gt;@color/colorPrimary&lt;/item&gt;\n  ...\n&lt;/style&gt;\n\n</code></pre> <p>The actual name of the customized theme is arbitrary and can be chosen at will.</p> <p>Any customized theme needs to be added to the <code>AndroidManifest.xml</code> file by replacing the initial <code>Theme.Jumio</code>.  </p> <pre><code>&lt;activity\n  android:name=\"com.jumio.defaultui.JumioActivity\"\n  android:theme=\"@style/AppTheme.JumioCustom\"\n  ...\n&lt;activity/&gt;\n</code></pre>"},{"location":"integration_faq/#scan-overlay-is-not-displayed","title":"Scan Overlay Is Not Displayed","text":"<p>Make sure all necessary style attributes have been added to your custom theme specified in the <code>style.xml</code> file. In case of issues with scan overlay, all relevant attributes start with <code>jumio_scanOverlay</code> and <code>face_scanOverlay</code>.</p> <p>An overview of all style attributes can be found here</p>"},{"location":"integration_faq/#language-localization","title":"Language Localization","text":"<p><code>Jumio Android Localization</code> supports the default Android localization features for a number of different languages and cultures. Any language changes within the SDK or separate language support during runtime (meaning the SDK language differs from the overall device languages) are not possible.</p> <p>All label texts and button titles in the SDK can be changed and localized by adding the required Strings you want to change in a <code>strings.xml</code> file in a <code>values</code> directory for the language and culture preference that you want to support. All modifiable strings can be modified can be found within our Sample application.</p> <p>Currently, the following languages are automatically supported for your convenience: Supported languages</p> <p>Runtime language changes within the SDK or separate language support (meaning the SDK language differs from the overall device languages) is not possible. All of the used string values can be found in the sample project resource folder. If you want to manage certain strings individually, please access them in the values-xx folder that corresponds to the language.</p> <p>Note: The last two letters of the values folder (marked \"xx\" above) refer to the ISO alpha-2 country code, which has to be used for the localization to work automatically. Please refer to the country list if you have trouble determining which string file contains to which language.</p>"},{"location":"integration_faq/#accessibility","title":"Accessibility","text":"<p>Our SDK supports accessibility features. Visually impaired users can now enable TalkBack or increase the text size on their device. The accessibility-strings that are used by TalkBack contain accessibility in their key and can be also modified in the <code>strings.xml</code>.</p>"},{"location":"integration_faq/#string-updates","title":"String Updates","text":"<p>For an overview of all updates and changes of SDK string keys please refer to the revision history on Github.</p>"},{"location":"integration_faq/#java-8-compatibility","title":"Java 8 Compatibility","text":"<p>Jumio SDK uses Java 8 language. It is necessary to enable Java 8 source and target compatibility for in the <code>build.gradle</code> file using <code>compileOptions</code>:</p> <pre><code>android {\n...\n  compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n}\n</code></pre>"},{"location":"integration_faq/#overview-of-scanning-methods","title":"Overview of Scanning Methods","text":""},{"location":"integration_faq/#autocapture","title":"Autocapture","text":"<p>Combines all previously existing scanning methods into one automatic, seamless experience.</p> <p> </p>"},{"location":"integration_faq/#linefinder","title":"Linefinder","text":"<p>Scanning using edge detection.</p> <p> </p>"},{"location":"integration_faq/#mrz","title":"MRZ","text":"<p>Data extraction from passports, some identity cards and some visas.</p> <p> </p>"},{"location":"integration_faq/#barcode","title":"Barcode","text":"<p>PDF417 barcode data extraction, for example from US and Canadian driver licenses.</p> <p> </p>"},{"location":"integration_faq/#manual-capture","title":"Manual Capture","text":"<p>Manual scanning (taking a picture) using the shutterbutton, fallback option in case user is having trouble.</p> <p> </p>"},{"location":"integration_faq/#nfc","title":"NFC","text":"<p>Data extraction from eMRTD documents, for example passports.</p> <p> </p>"},{"location":"integration_faq/#glossary","title":"Glossary","text":"<p>A quick guide to commonly used abbreviations throughout the documentation which may not be all that familiar.</p>"},{"location":"integration_faq/#google-play-store-prominent-disclosure","title":"Google Play Store Prominent Disclosure","text":"<p>Some parts of the SDK might require prominent disclosure - please see the Privacy Notice section in the Integration Guide for further details</p>"},{"location":"integration_faq/#jumio-support","title":"Jumio Support","text":"<p>The Jumio development team is constantly striving to optimize the size of our frameworks while increasing functionality, to improve your KYC and to fight fraud. If you have any further questions, please reach out to our support team.</p>"},{"location":"integration_glossary/","title":"Glossary","text":""},{"location":"integration_glossary/#glossary","title":"Glossary","text":""},{"location":"integration_glossary/#commonly-used-abbreviations","title":"Commonly Used Abbreviations","text":""},{"location":"integration_glossary/#cvv","title":"CVV","text":"<p>Card Verification Value: A verification number on any credit card, usually 3-4 digits long</p>"},{"location":"integration_glossary/#dob","title":"DOB","text":"<p>Date Of Birth</p>"},{"location":"integration_glossary/#dv","title":"DV","text":"<p>Driver\u2019s License</p>"},{"location":"integration_glossary/#gdpr","title":"GDPR","text":"<p>General Data Protection Regulation (EU): EU-wide data privacy regulation protecting natural persons and their personal data, especially in regards to collecting, processing and the free movement of that data</p>"},{"location":"integration_glossary/#iso-3166-1","title":"ISO 3166-1","text":"<p>ISO standard detailing standard country code abbreviations (like AUT, DEU, etc); either alpha-2  (using two letters) or alpha-3 (using three letters)</p>"},{"location":"integration_glossary/#kyc","title":"KYC","text":"<p>Know Your Customer</p>"},{"location":"integration_glossary/#kyx","title":"KYX","text":"<p>Know Your Everything: Jumio\u2019s end-to-end identity platform</p>"},{"location":"integration_glossary/#mrp","title":"MRP","text":"<p>Machine Readable Passport</p>"},{"location":"integration_glossary/#mrtd","title":"MRTD","text":"<p>Machine Readable Travel Document</p>"},{"location":"integration_glossary/#emrtd","title":"eMRTD","text":"<p>Electronic Machine Readable Travel Document</p>"},{"location":"integration_glossary/#mrz","title":"MRZ","text":"<p>Machine Readable Zone: Standardized, usually at the bottom of the identity page of a passports, between 2 and 3 lines long, varies in size</p>"},{"location":"integration_glossary/#nfc","title":"NFC","text":"<p>Near-Field Communication: Establishes wireless connection from one device to another, but only if that device is in close enough proximity; can act as an electronic identity document / electronic identity token and is already used in many identity documents worldwide</p>"},{"location":"integration_glossary/#nv","title":"NV","text":"<p>Netverify</p>"},{"location":"integration_glossary/#oauth2","title":"OAuth2","text":"<p>An industry-standard protocol for authorization</p>"},{"location":"integration_glossary/#oauth2-access-token","title":"OAuth2 Access Token","text":"<p>An access token using the OAuth2 protocol to make safe API calls and securely access resources from a server</p>"},{"location":"integration_glossary/#ocr","title":"OCR","text":"<p>Optical Character Recognition: Converts images of text, such as text on IDs, to machine-encoded and machine-readable text</p>"},{"location":"integration_glossary/#pii","title":"PII","text":"<p>Personal(ly) Identifiable Information: All of our products deal with highly sensitive data regarding information relating to an identifiable person, which is handled with great care, the best possible security and in compliance with the GDPR</p>"},{"location":"integration_glossary/#pp","title":"PP","text":"<p>Passport</p>"},{"location":"integration_glossary/#3d-liveness","title":"3D-Liveness","text":"<p>Liveness check: The 3D-liveness check makes sure that a face scan performed was not of a picture, but of an actual, living person who also matches the picture on the previously scanned document</p>"},{"location":"integration_glossary/#did","title":"DID","text":"<p>Digital Identity</p>"},{"location":"integration_guide/","title":"Integration Guide","text":""},{"location":"integration_guide/#integration-guide-for-android-sdk","title":"Integration Guide for Android SDK","text":"<p>Jumio\u2019s products allow businesses to establish the genuine identity of their users by verifying government-issued IDs in real-time. ID Verification, Identity Verification and other services are used by financial service organizations and other leading brands to create trust for safe onboarding, money transfers and user authentication.</p>"},{"location":"integration_guide/#release-notes","title":"Release Notes","text":"<p>Please refer to our Change Log for more information. Current SDK version: 4.6.0</p> <p>For technical changes that should be considered when updating the SDK, please read our Transition Guide.</p>"},{"location":"integration_guide/#code-documentation","title":"Code Documentation","text":"<p>Full API documentation for the Jumio Android SDK can be found here.</p>"},{"location":"integration_guide/#setup","title":"Setup","text":"<p>The basic setup is required before continuing with the following setup for the Jumio SDK. If you are updating your SDK to a newer version, please also refer to:</p> <p>Changelog Transition Guide</p>"},{"location":"integration_guide/#dependencies","title":"Dependencies","text":"<p>The SDK Setup Tool is a web tool that helps determine available product combinations and corresponding dependencies for the Jumio SDK, as well as an export feature to easily import the applied changes straight into your codebase.</p> <p></p> <p>Below you can find a list of dependencies that can be added to your application to enable different functionality of the Jumio SDK. Some modules are mandatory, others are optional.</p> <p>If an optional module is not linked, some functionalities may not be available, but the library size will be reduced. The Sample app apk size is currently around 17 MB.</p> <pre><code>// [Mandatory] Jumio Core library\ndependencies {\n    implementation \"com.jumio.android:core:4.6.0\"               \n    ...\n}\n\n// [Optional] Extraction methods\ndependencies {\n    implementation \"com.jumio.android:mrz:4.6.0\"                // MRZ scanning\n    implementation \"com.jumio.android:nfc:4.6.0\"                // NFC scanning\n    implementation \"com.jumio.android:linefinder:4.6.0\"         // Linefinder scanning\n    implementation \"com.jumio.android:docfinder:4.6.0\"          // Autocapture library\n    implementation \"com.jumio.android:barcode:4.6.0\"            // Barcode scanning\n    implementation \"com.jumio.android:iproov:4.6.0\"             // Face Liveness library\n  implementation \"com.jumio.android:liveness:4.6.0\"           // Face Liveness library\n    implementation \"com.jumio.android:digital-identity:4.6.0\"   // Digital Identity verification library\n    ...\n}\n\n// [Optional] Extraction methods alternatives\ndependencies {\n  implementation \"com.jumio.android:barcode-mlkit:4.6.0\"      // Barcode scanning alternative\n  ...\n}\n\n// [Optional] Jumio Default UI\ndependencies {\n    implementation \"com.jumio.android:defaultui:4.6.0\"\n    ...\n}\n\n// [Optional] Additional functionality\ndependencies {\n    implementation \"com.jumio.android:datadog:4.6.0\"            // Analytics library\n    implementation \"com.jumio.android:devicerisk:4.6.0\"         // Device fingerprinting library\n    ...\n}\n</code></pre>"},{"location":"integration_guide/#sdk-version-check","title":"SDK Version Check","text":"<p>Use <code>JumioSDK.sdkVersion</code> to check which SDK version is being used.</p>"},{"location":"integration_guide/#root-detection","title":"Root Detection","text":"<p>For security reasons, applications implementing the SDK should not run on rooted devices. Use either the below method or a self-devised check to prevent usage of SDK scanning functionality on rooted devices.</p> <pre><code>JumioSDK.isRooted(context: Context)\n</code></pre> <p>\u26a0\ufe0f\u00a0\u00a0Note: Please be aware that the JumioSDK root check uses various mechanisms for detection, but doesn't guarantee to detect 100% of all rooted devices.</p>"},{"location":"integration_guide/#device-supported-check","title":"Device Supported Check","text":"<p>Use the method below to check if the current device platform is supported by the SDK.</p> <pre><code>JumioSDK.isSupportedPlatform(context: Context)\n</code></pre>"},{"location":"integration_guide/#autocapture","title":"Autocapture","text":"<p>The module <code>com.jumio.android:docfinder</code> offers one generic scanning method across all ID documents, providing a more seamless capture experience for the end user. The SDK will automatically detect which type of ID document is presented by the user and guide them through the capturing process with live feedback. The models can be bundled with the app directly to save time on the download during the SDK runtime. Therefore download the following files from here and here and add it to the app assets folder.</p>"},{"location":"integration_guide/#certified-face-liveness","title":"Certified Face Liveness","text":"<p>Jumio uses Certified Liveness technology to determine liveness. Link <code>com.jumio.android:liveness</code> and  <code>com.jumio.android:iproov</code> modules in order to use Jumio Liveness.</p> <p>If necessary, the iProov SDK version can be overwritten with a more recent one:</p> <pre><code>implementation \"com.jumio.android:iproov:4.6.0\"\nimplementation(\"com.iproov.sdk:iproov:8.3.1\") {\n    exclude group: 'org.json', module: 'json'\n}\n</code></pre>"},{"location":"integration_guide/#barcode-scanning-alternative","title":"Barcode Scanning Alternative","text":"<p>As an alternative to the <code>com.jumio.android:barcode</code> dependency, you can substitute <code>com.jumio.android:barcode-mlkit</code>. This dependency includes <code>com.google.android.gms:play-services-mlkit-barcode-scanning</code> library - if your application includes other Google ML-kit libraries, it might be necessary to override meta-data specified in the application tag of the <code>play-services-mlkit-barcode-scanning</code> manifest by merging multiple manifests:</p> <pre><code>&lt;meta-data\n  android:name=\"com.google.android.gms.vision.DEPENDENCIES\"\n  android:value=\"barcode\"\n  tools:replace=\"android:value\" /&gt;\n</code></pre>"},{"location":"integration_guide/#privacy-notice","title":"Privacy Notice","text":"<p>If the module <code>com.jumio.android:devicerisk</code> is linked we collect data depending on the permissions given for fraud detection on</p> <ul> <li>Location</li> <li>Battery Usage</li> <li>Device Identifier</li> <li>Device Storage</li> <li>MAC Address</li> <li>SIM information (MNC, MCC, IMEI, Phone Number, Phone Type (GSM/CDMA), SIM Number, etc.)</li> <li>Google Services ID</li> </ul> <p>If you submit your app to the Google Play Store a Prominent Disclosure explaining the collected User Data is required. The collected user data also needs to be declared in your Data Safety Form and the Privacy Policy related to your application.</p> <p>Other stores might require something similar - please check before submitting your app to the store.</p> <p>Please see the Jumio Privacy Policy for Online Services for further information.</p>"},{"location":"integration_guide/#digital-identity-did","title":"Digital Identity (DID)","text":"<p>In case Digital Identity verification has been enabled for your account you can add the <code>com.jumio.android:digital-identity</code> dependency to your application. This will enable you to make use of DID verification within the SDK.</p> <p>Over the course of DID verification the SDK will launch an according third party application representing your Digital Identity. Communication between both applications (your integrating application and the Digital Identity application) is done via a so-called \"deep link\". For more information on deep link handling on Android please check out their official guide.</p>"},{"location":"integration_guide/#deep-link-setup","title":"Deep link setup","text":"<p>To enable your app specific deep link, our support team has to setup an according scheme of your choice for you. This scheme will be used by the SDK to identify your application while returning from the DID provider's application. For the scheme basically any string can be used, however it is recommended that it is unique to your application in some way. A suggestion would be your company name.</p> <p>Following snippet shows how the deep link needs to be setup in your application's <code>AndroidManifest.xml</code> file:</p> <pre><code>&lt;activity\n    android:name=\"com.jumio.app.HostingActivity\"\n    android:exported=\"true\"\n    android:launchMode=\"singleTask\"\n    android:theme=\"@style/Theme.Jumio\"&gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=\"android.intent.action.VIEW\" /&gt;\n\n        &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;\n        &lt;category android:name=\"android.intent.category.BROWSABLE\" /&gt;\n\n        &lt;data android:scheme=\"&lt;your-app-scheme&gt;\" /&gt;\n    &lt;/intent-filter&gt;\n&lt;/activity&gt;\n</code></pre> <p>Please note that the properties <code>android:exported=\"true\"</code> and <code>android:launchMode=\"singleTask\"</code> need to be specified as well. The first parameter basically tells the Android system that your <code>Activity</code> can be found by the system and other applications. By specifying <code>launchMode=\"singleTask\"</code> any already running task for this <code>Activity</code> will be resumed (instead of creating a new instance). Both are requirements so that the SDK can handle the according deep link correctly.</p> <p>In case you are using Jumio's Default UI in your app (see section Default UI) you also need to specify <code>tools:replace=\"android:exported\"</code> to <code>JumioActivity</code>'s <code>&lt;activity&gt;</code> tag like so:</p> <pre><code>&lt;activity\n    android:name=\"com.jumio.defaultui.JumioActivity\"\n    android:exported=\"true\"\n    android:launchMode=\"singleTask\"\n    tools:replace=\"android:exported\"&gt;\n    &lt;intent-filter&gt;\n        ...\n    &lt;/intent-filter&gt;\n&lt;/activity&gt;\n</code></pre> <p>As deep link handling happens on <code>Activity</code> level, the according data needs to be forwarded to the SDK via <code>Activity.onNewIntent()</code>. The following code snippet shows how this can be achieved. If you're using Jumio's Default UI you can ignore this step.</p> <pre><code>override fun onNewIntent(intent: Intent) {\n    super.onNewIntent(intent)\n\n    intent.data?.let { deepLink -&gt;\n        val activeScanPart = scanPart ?: return\n\n        JumioDeepLinkHandler.consumeForScanPart(deepLink, activeScanPart)\n    }\n}\n</code></pre>"},{"location":"integration_guide/#initialization","title":"Initialization","text":""},{"location":"integration_guide/#requesting-a-token-via-oauth2","title":"Requesting a Token (via OAuth2)","text":"<p>Your OAuth2 credentials are constructed using your API token as the Client ID and your API secret as the Client secret. You can view and manage your Client ID and secret in the Customer Portal under:</p> <ul> <li>Settings &gt; API credentials &gt; OAuth2 Clients</li> </ul> <p>Client ID and Client secret are used to generate an OAuth2 access token. Send a workflow request using the acquired OAuth2 access token to receive the SDK token necessary to initialize the Jumio SDK.</p> <p>OAuth2 has to be activated for your account. Contact your Jumio Account Manager for activation. For more details, please refer to Authentication and Encryption.</p>"},{"location":"integration_guide/#initializing-the-jumio-sdk","title":"Initializing the Jumio SDK","text":"<p>Use your aquired SDK token and your according datacenter to initialize the <code>JumioSDK</code>:</p> <pre><code>const val YOUR_SDK_TOKEN = \"\"\nconst val YOUR_DATACENTER = \"\"\n\nsdk = JumioSDK(context: Context).apply {\n    token = \"YOUR_SDK_TOKEN\"\n    datacenter = \"YOUR_DATACENTER\"\n}\n</code></pre> <p>Data center is set to <code>\"US\"</code> by default. If your customer account is in the EU data center, use <code>\"EU\"</code> instead. Alternatively, use <code>\"SG\"</code> for Singapore.</p> <p>\u26a0\ufe0f\u00a0\u00a0Note: We strongly recommend storing all credentials outside of your app! We suggest loading them during runtime from your server-side implementation.</p>"},{"location":"integration_guide/#configuration","title":"Configuration","text":"<p>Every Jumio SDK instance is initialized using a specific <code>sdk.token</code>. This token contains information about the workflow, credentials, transaction identifiers and other parameters. Configuration of this token allows you to provide your own internal tracking information for the user and their transaction, specify what user information is captured and by which method, as well as preset options to enhance the user journey. Values configured within the <code>sdk.token</code> during your API request will override any corresponding settings configured in the Customer Portal.</p>"},{"location":"integration_guide/#worfklow-selection","title":"Worfklow Selection","text":"<p>Use ID verification callback to receive a verification status and verified data positions (see Callback section). Make sure that your customer account is enabled to use this feature. A callback URL can be specified for individual transactions (for URL constraints see chapter Callback URL). This setting overrides any callback URL you have set in the Jumio Customer Portal. Your callback URL must not contain sensitive data like PII (Personally Identifiable Information) or account login. Set your callback URL using the <code>callbackUrl</code> parameter.</p> <p>Use the correct workflow definition key in order to request a specific workflow. Set your key using the <code>workflowDefinition.key</code> parameter.</p> <pre><code>{\n  \"customerInternalReference\": \"CUSTOMER_REFERENCE\",\n  \"workflowDefinition\": {\n    \"key\": \"X\"\n  },\n  \"callbackUrl\": \"YOUR_CALLBACK_URL\"\n}\n</code></pre> <p>For more details, please refer to our Workflow Description Guide.</p> <p>\u2139\ufe0f\u00a0\u00a0Note: Identity Verification requires portrait orientation in your app.</p>"},{"location":"integration_guide/#transaction-identifiers","title":"Transaction Identifiers","text":"<p>There are several options in order to uniquely identify specific transactions. <code>customerInternalReference</code> allows you to specify your own unique identifier for a certain scan (max. 100 characters). Use <code>reportingCriteria</code>, to identify the scan in your reports (max. 100 characters). You can also set a unique identifier for each user using <code>userReference</code> (max. 100 characters).</p> <p>For more details, please refer to our API Guide.</p> <pre><code>{\n  \"customerInternalReference\": \"CUSTOMER_REFERENCE\",\n  \"workflowDefinition\": {\n    \"key\": \"X\"\n  },\n  \"reportingCriteria\": \"YOUR_REPORTING_CRITERIA\",\n  \"userReference\": \"YOUR_USER_REFERENCE\"\n}\n</code></pre> <p>\u26a0\ufe0f\u00a0\u00a0Note: Transaction identifiers must not contain sensitive data like PII (Personally Identifiable Information) or account login.</p>"},{"location":"integration_guide/#preselection","title":"Preselection","text":"<p>You can specify issuing country using ISO 3166-1 alpha-3 country codes, as well as ID types to skip selection during the scanning process. In the example down below, Austria (\"AUT\") and the USA (\"USA\") have been preselected. PASSPORT and DRIVER_LICENSE have been chosen as preselected document types. If all parameters are preselected and valid and there is only one given combination (one country and one document type), the document selection screen in the SDK can be skipped entirely.</p> <p>For more details, please refer to our API Guide.</p> <p>\u26a0\ufe0f\u00a0\u00a0Note: \"Digital Identity\" document type can not be preselected!</p> <pre><code>{\n  \"customerInternalReference\": \"CUSTOMER_REFERENCE\",\n  \"workflowDefinition\": {\n    \"key\": X,\n    \"credentials\": [\n      {\n        \"category\": \"ID\",\n        \"type\": {\n          \"values\": [\n            \"DRIVING_LICENSE\",\n            \"PASSPORT\"\n          ]\n        },\n        \"country\": {\n          \"values\": [\n            \"AUT\",\n            \"USA\"\n          ]\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"integration_guide/#miscellaneous","title":"Miscellaneous","text":"<p>Use <code>cameraFacing</code> attribute of <code>JumioScanView</code> to configure the default camera and set it to <code>FRONT</code> or <code>BACK</code>.</p> <pre><code>scanView.cameraFacing = JumioCameraFacing.FRONT\n</code></pre>"},{"location":"integration_guide/#sdk-workflow","title":"SDK Workflow","text":""},{"location":"integration_guide/#retrieving-information","title":"Retrieving Information","text":"<p>The SDK returns a <code>JumioResult</code> object which contains the result of the finished workflow. Extracted ID data will not be returned by default - please contact Jumio Customer Service at support@jumio.com in case this is needed.</p> <p>The following tables give information on the specification of all data parameters and errors:</p> <ul> <li><code>JumioIDResult</code></li> <li><code>JumioFaceResult</code></li> <li><code>JumioRejectReason</code></li> <li><code>JumioError</code></li> </ul>"},{"location":"integration_guide/#class-jumioidresult","title":"Class JumioIDResult","text":"Parameter Type Max. length Description issuingCountry String 3 Country of issue as ISO 3166-1 alpha-3 country code idType String PASSPORT, DRIVER_LICENSE, IDENTITY_CARD or VISA as provided or selected firstName String 100 First name of the customer lastName String 100 Last name of the customer dateOfBirth String Date of birth issuingDate String Date of issue expiryDate String Date of expiry documentNumber String 100 Identification number of the document personalNumber String 14 Personal number of the document gender String Gender M, F or X nationality String Nationality of the customer placeOfBirth String 255 Place of birth country String Country of residence address String 64 Street name of residence city String 64 City of residence subdivision String 3 Last three characters of ISO 3166-2:US or ISO 3166-2:CA subdivision code postalCode String 15 Postal code of residence mrzLine1 String 50 MRZ line 1 mrzLine2 String 50 MRZ line 2 mrzLine3 String 50 MRZ line 3 rawBarcodeData String 50 Extracted barcode data extractionMethod JumioScanMode Extraction method used during scanning (MRZ, BARCODE, MANUAL, OCR_CARD, NFC) imageData JumioImageData Wrapper class for accessing image data of all credential parts from an ID verification session. This feature has to be enabled by your account manager."},{"location":"integration_guide/#class-jumiofaceresult","title":"Class JumioFaceResult","text":"Parameter Type Max. length Description passed Boolean extractionMethod JumioScanMode Extraction method used during scanning (FACE_MANUAL, FACE_IPROOV) imageData JumioImageData Wrapper class for accessing image data of all credential parts from an ID verification session. This feature has to be enabled by your account manager."},{"location":"integration_guide/#class-jumiorejectreason","title":"Class JumioRejectReason","text":"<p>List of all possible reject reasons returned if Instant Feedback is used:</p> Code Message Description Check enabled server-side (2022-05-25) 102 BLACK_WHITE_COPY Document appears to be a black and white photocopy x 103 COLOR_PHOTOCOPY Document appears to be a colored photocopy 104 DIGITAL_COPY Document appears to be a digital copy x 200 NOT_READABLE Document is not readable 201 NO_DOC No document could be detected x 206 MISSING_BACK Backside of the document is missing x 214 MISSING_FRONT Frontside of the document is missing x 2001 BLURRY Document image is unusable because it is blurry x 2003 MISSING_PART_DOC Part of the document is missing x 2004 HIDDEN_PART_DOC Part of the document is hidden 2005 DAMAGED_DOCUMENT Document appears to be damaged 2006 GLARE Document image is unusable because of glare x"},{"location":"integration_guide/#error-codes","title":"Error Codes","text":"<p>List of all error codes that are available via the <code>code</code> and <code>message</code> properties of the <code>JumioError</code> object. The first letter (A-J) represents the error case. The remaining characters are represented by numbers that contain information helping us understand the problem situation (format: [xx][yyyy]).</p> Code Message Description A[xx][yyyy] We have encountered a network communication problem Retry possible, user decided to cancel B[xx][yyyy] Authentication failed Secure connection could not be established, retry impossible C[xx]0401 Authentication failed API credentials invalid, retry impossible E[xx]0000 Connection error Retry possible, user decided to cancel F[xx]0000 Scanning not available at this time, please contact the app vendor Resources cannot be loaded, retry impossible G[xx]0000 Cancelled by end-user No error occurred H[xx]0000 The camera is currently not available Camera cannot be initialized, retry impossible I[xx]0000 Certificate not valid anymore. Please update your application End-to-end encryption key not valid anymore, retry impossible J[xx]0000 Transaction already finished User did not complete SDK journey within session lifetime N[xx]0000 Scanning not available at this time, please contact the app vendor Required images are missing to finalize the acquisition <p>\u26a0\ufe0f\u00a0\u00a0Note: Please always include error code and message when filing an error related issue to our support team.</p>"},{"location":"integration_guide/#default-ui","title":"Default UI","text":"<p>In case you're using Jumio's Default UI module (see Dependencies) you may declare the <code>JumioActivity</code> in your <code>AndroidManifest.xml</code>. With this you can use Jumio's default theme or specify a custom theme (see Customization for details). Also you can set the orientation to be sensor based or locked by using the attribute <code>android:screenOrientation</code>. Please note though that some screens in Jumio SDK launch in portrait mode only.</p> <pre><code>&lt;activity\n  android:theme=\"@style/Theme.Jumio\"\n  android:hardwareAccelerated=\"true\"\n  android:name=\"com.jumio.defaultui.JumioActivity\"\n  android:configChanges=\"orientation|screenSize|screenLayout|keyboardHidden\" /&gt;\n</code></pre>"},{"location":"integration_guide/#custom-ui","title":"Custom UI","text":"<p>ID Verification can be also implemented as a custom scan view. This means that only the scan view (including the scan overlays) are provided by the SDK. The handling of the lifecycle, document selection, readability confirmation, intermediate callbacks, and all other steps necessary to complete a scan have to be handled by the client application that implements the SDK.</p> <p>The following sequence diagram outlines components, callbacks and methods for a basic ID Verification workflow:</p> <p></p> <p>\u26a0\ufe0f\u00a0\u00a0Note: The new 3D face liveness capturing technology is not optimized for tablets. When using Identity Verification, the face scanner will fallback to a simple face capturing functionality instead. Portrait orientation support is required in your app.</p> <p>CustomUI enables you to use a custom scan view with a plain scanning user interface. Initialize the Jumio SDK and set <code>token</code> and <code>datacenter</code>.</p> <pre><code>sdk = JumioSDK(context: Context).apply {\n    token = \"YOUR_SDK_TOKEN\"\n    datacenter = JumioDataCenter.YOUR_DATACENTER\n}\n</code></pre> <ul> <li><code>JumioDataCenter</code> values: <code>US</code>, <code>EU</code>, <code>SG</code></li> </ul>"},{"location":"integration_guide/#controller-handling","title":"Controller Handling","text":"<p>Start the SDK by passing <code>context</code> and an instance of your class that implements <code>JumioControllerInterface</code>. You will receive a <code>JumioController</code> object in return:</p> <pre><code>val jumioController: JumioController = sdk.start(context, jumioControllerInterface)\n</code></pre> <p>When the <code>jumioController</code> is initialized, the following callback will be triggered:</p> <pre><code>onInitialized(credentials: List&lt;JumioCredentialInfo&gt;, consentItems: List&lt;JumioConsentItems&gt;?)\n</code></pre>"},{"location":"integration_guide/#consent-handling","title":"Consent Handling","text":"<p>To support compliance with various data protection laws, if a user\u2019s consent is required the parameter <code>consentItems</code> will provide a list of <code>JumioConsentItems</code>. Each consent item contains a text, a consent type and an URL that will redirect the user to Jumio\u2019s consent details. Each <code>JumioConsentItem</code> also provides a method <code>spannedTextWithLinkColor(color: Int)</code> that will return a spanned string containing the consent text and the link holder. If no color is specified, the link portion of the spanned string will only be underlined.</p> <p>If no consent is required, the parameter <code>consentItems</code> will be <code>null</code>.</p> <p>Each consent item can be one of two types: * <code>JumioConsentType.ACTIVE</code> * <code>JumioConsentType.PASSIVE</code></p> <p>For <code>ACTIVE</code> types, the user needs to accept the consent items explicitly, e.g. by enabling a UI switch or checking a checkbox for each consent item. For <code>PASSIVE</code> types, it is enough to present the consent text and URL to the user. The user implicitly accepts the passive consent items by continuing with the journey. For details please check out consent handling (1) (2) and consent adapter in our sample app.</p> <p>The user can open and continue to the provided consent link if they choose to do so. If the user consents to Jumio's policy, <code>jumioController.userConsented(consentItem: JumioConsentItem, userConsent: Boolean)</code> is required to be called internally before any credential can be initialized and the user journey can continue. If no consent is required, the list of <code>JumioConsentItems</code> will be <code>null</code>. If the user does not consent or if <code>jumioController.userConsented(consentItem: JumioConsentItem, userConsent: Boolean)</code> is not called for all the items inside the <code>consentItems</code> list, the user will not be able to continue the user journey.</p> <p>\u26a0\ufe0f\u00a0\u00a0Note: Please be aware that in cases where the list of <code>consentItems</code> is not <code>null</code>, the user must consent to Jumio's processing of personal information, including biometric data, and be provided a link to Jumio's Privacy Notice. Do not accept automatically without showing the user any terms.</p>"},{"location":"integration_guide/#credential-handling","title":"Credential Handling","text":"<p>Obtain an instance of <code>JumioCredential</code> which will contain all necessary information about the verification process by calling <code>start</code> on the <code>JumioController</code>.</p> <p>For ID verification you will receive a <code>JumioIDCredential</code>, for Identity Verification a <code>JumioFaceCredential</code>, and so on. Call <code>isConfigured</code> to check if the credential is already pre-configured. If so, it can be started right away.</p> <pre><code>val currentCredentialInfo = ...\n\nval currentCredential = jumioController.start(currentCredentialInfo)\nif (currentCredential?.isConfigured == true) {\n    // credential can be started\n}\n</code></pre> <p>If the credential is not configured yet, it needs some more configuration before scan parts can be initialized. Details on how to configure each credential and retrieve the first scan part can be found below.</p> <ul> <li><code>JumioCredentialCategory</code> values = <code>ID</code>, <code>FACE</code>, <code>DOCUMENT</code>, <code>DATA</code></li> </ul>"},{"location":"integration_guide/#jumio-id-credential","title":"Jumio ID Credential","text":"<p>In case of <code>JumioIDCredential</code>, you can retrieve all available countries from <code>supportedCountries</code>. After selecting a specific country from that list, you can query available documents for that country by either calling <code>getPhysicalDocumentsForCountry</code> or <code>getDigitalDocumentsForCountry</code>. To configure the <code>JumioIDCredential</code>, pass your desired document as well as the country to <code>setConfiguration()</code>.</p> <p>Retrieve the supported countries:</p> <pre><code>idCredential = ... // Credential received via jumioController.start\n\nval countries: List&lt;String&gt; = idCredential.countries\n\nval country = countries.first { ... } // Select your desired country\n</code></pre> <p>Query available physical documents (e.g. passports or driving licenses):</p> <pre><code>val jumioDocuments = idCredential.getPhysicalDocumentsForCountry(country)\n\nval document = jumioDocuments.first { it.type == JumioDocumentType.PASSPORT }\n</code></pre> <p>Query available digital documents (\"Digital Identities\"):</p> <pre><code>val jumioDocuments = idCredential.getDigitalDocumentsForCountry(country)\n\nval document = jumioDocuments.first()\n</code></pre> <p>Set a valid country / document configuration:</p> <pre><code>idCredential.setConfiguration(country, document)\n</code></pre> <ul> <li> <p><code>JumioPhysicalDocument</code> represents a single <code>JumioDocumentType</code> and <code>JumioDocumentVariant</code> combination</p> </li> <li> <p><code>JumioDocumentType</code> values: <code>PASSPORT</code>, <code>VISA</code>, <code>DRIVING_LICENSE</code>, <code>ID_CARD</code></p> </li> <li> <p><code>JumioDocumentVariant</code> values: <code>PAPER</code>, <code>PLASTIC</code></p> </li> <li> <p><code>JumioDigitalDocument</code> represents a digital document (\"Digital Identity\")</p> </li> </ul> <p>Once the credential is configured, it is ready to initialize it's first scan part and start the verification process:</p> <pre><code>val credentialPart = idCredential.credentialParts.first()\nidCredential.initScanPart(credentialPart, yourScanPartInterface)\n</code></pre>"},{"location":"integration_guide/#jumio-face-credential","title":"Jumio Face Credential","text":"<p>In case of <code>JumioFaceCredential</code>, depending of the configuration the SDK uses the Certified Liveness technology from iProov to determine liveness or the manual face detection. The mode can be detected by checking the <code>JumioScanMode</code> of the <code>JumioScanPart</code>. Make sure to also implement <code>FACE_MANUAL</code> as a fallback, in case <code>FACE_IPROOV</code> is not available.</p> <p>Retrieve the credential part of the credential to start the scanning process by calling:</p> <pre><code>val credentialPart = currentCredential?.credentialParts?.first()\nval scanPart = currentCredential?.initScanPart(credentialPart, yourScanPartInterface)\n</code></pre> <p>or use the convenience method</p> <pre><code>val scanPart = currentCredential?.initScanPart(yourScanPartInterface)\n</code></pre>"},{"location":"integration_guide/#jumio-document-credential","title":"Jumio Document Credential","text":"<p>In case of <code>JumioDocumentCredential</code>, there is the option to either acquire the image using the camera or selecting a PDF file from the device. Call <code>setConfiguration</code> with a <code>JumioAcquireMode</code> to select the preferred mode as described in the code documentation.</p> <ul> <li><code>JumioAcquireMode</code> values: <code>CAMERA</code>, <code>FILE</code></li> </ul> <pre><code>val acquireModes: List&lt;JumioAcquireMode&gt; = (credential as JumioDocumentCredential).availableAcquireModes\n\n(currentCredential as JumioDocumentCredential).setConfiguration(acquireModes[0])\n</code></pre> <p>Retrieve the credential part of the credential to start the scanning process by calling:</p> <pre><code>val credentialPart = currentCredential?.credentialParts?.first()\nval scanPart = currentCredential?.initScanPart(credentialPart, yourScanPartInterface)\n</code></pre> <p>or use the convenience method</p> <pre><code>val scanPart = currentCredential?.initScanPart(yourScanPartInterface)\n</code></pre> <p>If <code>JumioAcquireMode</code> <code>FILE</code> is used, the <code>JumioFileAttacher</code> needs to be utilized to add a File or FileDescriptor for the selected <code>JumioScanPart</code>.</p> <pre><code>val fileAttacher = JumioFileAttacher()\nfileAttacher.attach(scanPart)\n\nval file = File(\"/path/to/your/file.pdf\")\nfileAttacher.setFile(file)\n</code></pre>"},{"location":"integration_guide/#jumio-data-credential","title":"Jumio Data Credential","text":"<p><code>JumioDataCredential</code> is used for the device fingerprinting. There are some optional configurations you can do to enhance it's behavior.</p> <ol> <li>Add the following Android permissions to your <code>AndroidManifest.xml</code>, if not already added:</li> </ol> <pre><code>&lt;manifest&gt;\n    &lt;!--Get user's GPS Location.--&gt;\n    &lt;uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" /&gt;\n    &lt;uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /&gt;\n\n    &lt;!--Get User's Wifi name and Status.--&gt;\n    &lt;uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" /&gt;\n\n    &lt;!--Get User's Network information and State.--&gt;\n    &lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /&gt;\n\n    &lt;!--Get Phone and Network information (MNC, MCC, IMEI, Phone Number, Phone Type (GSM/CDMA), SIM Number, etc).--&gt;\n    &lt;uses-permission android:name=\"android.permission.READ_PHONE_STATE\" /&gt;\n\n    &lt;!--Get user's Biometric authentication settings (Face or Fingerprint authentication).--&gt;\n    &lt;uses-permission android:name=\"android.permission.USE_BIOMETRIC\" /&gt;\n\n    &lt;!--Get user's Biometric authentication settings (Face or Fingerprint authentication).--&gt;\n    &lt;uses-permission android:name=\"android.permission.USE_FINGERPRINT\" /&gt;\n\n    &lt;!--Write data into device to check re-installation behavior.--&gt;\n    &lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /&gt;\n\n    &lt;!--Get External storage status, total size, free size, etc.--&gt;\n    &lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" /&gt;\n\n    &lt;!--Get GSFID (Google Services Id) for accurate identification for unique users.--&gt;\n    &lt;uses-permission android:name=\"com.google.android.providers.gsf.permission.READ_GSERVICES\" /&gt;\n&lt;/manifest&gt;\n</code></pre> <p>\u2139\ufe0f\u00a0\u00a0Note:</p> <ul> <li>The reason for the requirement of the given permission is added as inline comment.</li> <li>Some of them are <code>dangerous</code> permissions, and you have to ask for the permission from the user. More information about permissions can be found in the official Android documentation</li> <li>The above permissions imply to add some features to your manifest file:</li> </ul> <pre><code>  &lt;uses-feature\n    android:name=\"android.hardware.location\"\n    android:required=\"false\"/&gt;\n\n  &lt;uses-feature\n    android:name=\"android.hardware.telephony\"\n    android:required=\"false\"/&gt;\n\n  &lt;uses-feature\n    android:name=\"android.hardware.wifi\"\n    android:required=\"false\"/&gt;\n</code></pre> <ol> <li>If you use proguard for obfuscation, you have to add some rules to your <code>proguard-rules.pro</code>    configuration file:</li> </ol> <pre><code>   -keep com.google.android.gms.*\n   -keep com.google.android.gms.tasks.*\n   -keep com.google.android.gms.ads.identifier.AdvertisingIdClient\n</code></pre>"},{"location":"integration_guide/#scanpart-handling","title":"ScanPart Handling","text":"<p>The following sequence diagram outlines an overview of ScanPart handling details: </p> <p>Start the scanning process by initializing the <code>JumioScanPart</code>. A list of mandatory <code>JumioCredentialPart</code>s is retrievable over <code>currentCredential?.credentialParts</code> as soon as the credential is configured. Possible values are:</p> <p><code>currentScanPart = currentCredential?.initScanPart(credentialPart, yourJumioScanPartInterface)</code></p> <ul> <li><code>JumioCredentialPart</code> values: <code>FRONT</code>, <code>BACK</code>, <code>MULTIPART</code>, <code>FACE</code>, <code>DOCUMENT</code>, <code>NFC</code>, <code>DEVICE_RISK</code></li> </ul> <p><code>MULTIPART</code> handles the scanning of multiple sides in one seamless capture experience. When a <code>MULTIPART</code> scan part is started, an additional <code>NEXT_PART</code> step is sent after <code>IMAGE_TAKEN</code>. This signals that another side of the document should be scanned now. The step returns the <code>JumioCredentialPart</code> that should be scanned next. We suggest to actively guide the user to move to the next part, e.g. by showing an animation and by disabling the extraction during the animation. Please also check the new <code>NEXT_PART</code> scan step for this <code>JumioCredentialPart</code></p> <p>Start the execution of the acquired <code>JumioScanPart</code> by calling <code>currentScanPart?.start()</code>.</p> <p>When the scanning is done, the parameter <code>JumioScanStep.CAN_FINISH</code> will be received and the scan part can be finished by calling <code>currentScanPart?.finish()</code>.</p> <p>Check if the credential is complete by calling <code>currentCredential?.isComplete</code> and finish the current credential by calling <code>currentCredential?.finish()</code>.</p> <p>Continue that procedure until all needed credentials (e.g. <code>ID</code>, <code>FACE</code>, <code>DOCUMENT</code>) are finished. Check if all credentials are finished with <code>jumioController.isComplete</code>, then call <code>jumioController?.finish()</code> to finish the user journey.</p> <p>The callback <code>onFinished()</code> will be received after the controller has finished:</p> <pre><code>override fun onFinished(result: JumioResult) {\n  log(\"onFinished\")\n  sdkResult.value = result\n}\n</code></pre>"},{"location":"integration_guide/#scan-steps","title":"Scan steps","text":"<p>During the scanning process <code>onScanStep()</code> will be called as soon as the <code>JumioScanPart</code> needs additional input to continue the scanning journey. The provided <code>JumioScanStep</code> indicates what needs to be done next.</p> <p><code>JumioScanStep</code> covers lifecycle events which require action from the customer to continue the process.</p> <p><code>JumioScanStep</code> values: <code>PREPARE</code>, <code>STARTED</code>, <code>ATTACH_ACTIVITY</code>, <code>ATTACH_FILE</code>, <code>SCAN_VIEW</code>, <code>NEXT_PART</code>, <code>IMAGE_TAKEN</code>, <code>PROCESSING</code>, <code>CONFIRMATION_VIEW</code>, <code>REJECT_VIEW</code>, <code>RETRY</code>, <code>CAN_FINISH</code>, <code>ADDON_SCAN_PART</code>, <code>DIGITAL_IDENTITY_VIEW</code>, <code>THIRD_PARTY_VERIFICATION</code></p> <p><code>PREPARE</code> is only sent if a scan part requires upfront preparation and the customer should be notified (e.g. by displaying a loading screen):</p> <pre><code>JumioScanStep.PREPARE -&gt; {\n  showLoadingView()\n}\n</code></pre> <p><code>STARTED</code> is always sent when a scan part is started. If a loading spinner was triggered before, it can now be dismissed:</p> <pre><code>JumioScanStep.STARTED -&gt; {\n  hideLoadingView()\n}\n</code></pre> <p><code>ATTACH_ACTIVITY</code> indicates that an Activity Context is needed. Please see <code>JumioActivityAttacher</code> for more information.</p> <pre><code>JumioScanStep.ATTACH_ACTIVITY -&gt; {\n    currentScanPart?.let {\n        JumioActivityAttacher(this).attach(it)\n    }\n}\n</code></pre> <p><code>ATTACH_FILE</code> is called when a File through the <code>JumioFileAttacher</code> can be added to the <code>JumioScanPart</code>.</p> <pre><code>JumioScanStep.ATTACH_FILE -&gt; {\n    currentScanPart?.let {\n        val jumioFileAttacher = JumioFileAttacher()\n        jumioFileAttacher.attach(it)\n        // Choose how the file should be attached\n        // jumioFileAttacher.setFileDescriptor(&lt;your file descriptor&gt;)\n        // jumioFileAttacher.setFile(&lt;your file&gt;)\n    }\n}\n</code></pre> <p><code>SCAN_VIEW</code> points out that a <code>JumioScanView</code> needs to be attached to the <code>JumioScanPart</code>. The <code>JumioScanView</code> is a custom view that can be placed in your layout. During runtime it just needs to be attached to the <code>JumioScanPart</code>.</p> <pre><code>JumioScanStep.SCAN_VIEW -&gt; {\n    currentScanPart?.let {\n        jumioScanView.attach(it)\n    }\n}\n</code></pre> <p><code>IMAGE_TAKEN</code> is triggered as soon as the image is taken and has been uploaded to the Jumio server. The camera preview is stopped during that step if no additional part needs to be scanned. Otherwise <code>NEXT_PART</code> will be triggered with additional information on which part has to be scanned next.</p> <p>When background processing is executed, <code>JumioScanStep.PROCESSING</code> is triggered.</p> <p>If images for confirmation or rejection need to be displayed then <code>JumioScanStep.CONFIRMATION_VIEW</code> or <code>JumioScanStep.REJECT_VIEW</code> is triggered. Simply attach the <code>JumioConfirmationHandler</code> or <code>JumioRejectHandler</code> once the steps are triggered and render the available <code>JumioCredentialParts</code> in <code>JumioConfirmationView</code> or <code>JumioRejectView</code> objects:</p> <pre><code>JumioScanStep.CONFIRMATION_VIEW -&gt; {\n    val confirmationHandler = ConfirmationHandler()\n    confirmationHandler.attach(scanPart)\n    confirmationHandler.parts.forEach {\n        val confirmationView = JumioConfirmationView(context)\n        confirmationHandler.renderPart(it, confirmationView)\n        ...\n    }\n}\nJumioScanStep.REJECT_VIEW -&gt; {\n  val rejectHandler = RejectHandler()\n  rejectHandler.attach(scanPart)\n  rejectHandler.parts.forEach {\n      val rejectView = JumioRejectView(context)\n      rejectHandler.renderPart(it, rejectView)\n      ...\n  }\n}\n</code></pre> <p>The scan part can be confirmed by calling <code>confirmationView.confirm()</code> or retaken by calling <code>confirmationView.retake()</code> or <code>rejectView.retake()</code>.</p> <p>The retry scan step returns a data object of type <code>JumioRetryReason</code>. On <code>RETRY</code>, a retry should be triggered on the scan part.</p> <pre><code>JumioScanStep.RETRY -&gt; {\n    val reason = data as? JumioRetryReason ?: return\n\n    val retryCode = reason.code\n    val retryMessage = reason.message\n    ...\n\n    currentScanPart?.retry(reason)\n}\n</code></pre> <p>For possible retry codes please checkout <code>JumioRetryReasonGeneric</code>, <code>JumioRetryReasonDocumentVerification</code>, <code>JumioRetryReasonNfc</code>, <code>JumioRetryReasonIproov</code> and <code>JumioRetryReasonDigitalIdentity</code>.</p> <p><code>DIGITAL_IDENTITY_VIEW</code> points out that the current <code>JumioScanPart</code> needs to be attached to a <code>JumioDigitalIdentityView</code>. The <code>JumioDigitalIdentityView</code> is a custom view that can be placed in your layout.</p> <pre><code>JumioScanStep.DIGITAL_IDENTITY_VIEW -&gt; {\n    currentScanPart?.let {\n        jumioDigitalIdentityView.attach(it)\n    }\n}\n</code></pre> <p><code>THIRD_PARTY_VERIFICATION</code> is triggered in case the current <code>JumioScanPart</code> will switch to a third party's application to continue the verification process (e.g. for Digital Identity verification). As this might take some time, showing a loading indicator is recommended.</p> <pre><code>JumioScanStep.THIRD_PARTY_VERIFICATION -&gt; {\n    showLoadingView()\n}\n</code></pre> <p>As soon as the scan part has been confirmed and all processing has been completed <code>CAN_FINISH</code> is triggered. <code>scanPart.finish()</code> can now be called. During the finish routine the SDK checks if there is an add-on functionality for this part available, e.g. possible NFC scanning after an MRZ scan part. In this case <code>ADDON_SCAN_PART</code> will be called</p> <p>When an add-on to the current scan part is available, <code>JumioScanStep.ADDON_SCAN_PART</code> is sent. The add-on scan part can be retrieved using the method <code>addonScanPart = currentCredential?.getAddonPart()</code>.</p>"},{"location":"integration_guide/#scan-updates","title":"Scan Updates","text":"<p>Apart from the scan steps, there are also scan updates distributed the <code>scanPart</code> method <code>onUpdate()</code>. They cover additional scan information that is relevant and might need to be displayed during scanning. The parameters are <code>JumioScanUpdate</code> and an optional value <code>data</code> of type <code>Any</code> that can contain additional information for each scan update as described.</p> <p><code>JumioScanUpdate</code> values: <code>LEGAL_HINT</code>, <code>CAMERA_AVAILABLE</code>, <code>FALLBACK</code>, <code>NFC_EXTRACTION_STARTED</code>, <code>NFC_EXTRACTION_PROGRESS</code>, <code>NFC_EXTRACTION_FINISHED</code>, <code>CENTER_ID</code>, <code>HOLD_STRAIGHT</code>, <code>MOVE_CLOSER</code>, <code>TOO_CLOSE</code>, <code>HOLD_STILL</code>, <code>MOVE_FACE_CLOSER</code>, <code>FACE_TOO_CLOSE</code></p> <p>For <code>FALLBACK</code>, there are 2 possible <code>JumioFallbackReason</code>'s sent in the optional <code>data</code> value to indicate the reason of the fallback.</p>"},{"location":"integration_guide/#result-and-error-handling","title":"Result and Error Handling","text":"<p>Instead of using the standard method <code>onActivityResult()</code>, implement the following methods within your <code>jumioControllerInterface</code> for successful scans and error notifications:</p> <p>The method <code>onFinished(result: JumioResult)</code> has to be implemented to handle data after a successful scan, which will return <code>JumioResult</code>.</p> <pre><code>override fun onFinished(result: JumioResult) {\n    val data = result\n    // handle success case\n    finish()\n}\n</code></pre> <p>The method <code>onError(error: JumioError)</code> has to be implemented to handle data after an unsuccessful scan, which will return <code>JumioError</code>. Check the parameter <code>error.isRetryable</code> to see if the failed scan attempt can be retried.</p> <pre><code>override fun onError(error: JumioError) {\n    if (error.isRetryable) {\n        // retry scan attempt\n    } else {\n        // handle error case\n    }\n    log(String.format(\"onError: %s, %s, %s\", error.code, error.message, if (error.isRetryable) \"true\" else \"false\"))\n}\n</code></pre> <p>If an error is retryable, <code>jumioController.retry()</code> should be called to execute a retry.</p>"},{"location":"integration_guide/#instant-feedback","title":"Instant Feedback","text":"<p>The use of Instant Feedback provides immediate end user feedback by performing a usability check on any image the user took and prompting them to provide a new image immediately if this image is not usable, for example because it is too blurry. Please refer to the JumioRejectReason table for a list of all reject possibilities.</p>"},{"location":"integration_guide/#customization","title":"Customization","text":"<p>The Jumio SDK provides various options to customize its UI. If you are using Default UI you can change each screen to fulfil your needs. In case you decide to implement the verification workflow on your own (see Custom UI) you also have the possibility to influence the look and feel of some views provided by the SDK, e.g. <code>JumioScanView</code>.</p>"},{"location":"integration_guide/#customization-tool","title":"Customization Tool","text":"<p>Jumio Surface is a web tool that offers the possibility to apply and visualize all available customization options for the Jumio SDK, as well as an export feature that generates all data needed to import the desired changes straight into your codebase.</p> <p></p>"},{"location":"integration_guide/#default-ui-customization","title":"Default UI customization","text":"<p>The surface tool utilizes each screen of Jumio's Default UI to visualize all items and colors that can be customized. If you are planning to use the Default UI implementation, you can specify the <code>Theme.Jumio</code> as a parent style in your application and override according attributes within this theme to match your application's look and feel.</p> <p>After customizing the SDK via the surface tool, you can click the Android-Xml button in the Output menu on the bottom right to copy the code from the theme <code>AppThemeCustomJumio</code> to your Android app's <code>styles.xml</code> file.</p> <p>Apply your custom theme that you defined before by replacing <code>Theme.Jumio</code> in the <code>AndroidManifest.xml:</code></p> <pre><code>&lt;activity\n  android:name=\"com.jumio.defaultui.JumioAcitivty\"\n  android:theme=\"@style/AppThemeCustomJumio\"&gt;\n    ...\n&lt;/activity&gt;\n</code></pre>"},{"location":"integration_guide/#dark-mode","title":"Dark Mode","text":"<p><code>Theme.Jumio</code> attributes can also be customized for dark mode. If you haven't done so already, create a <code>values-night</code> folder in your resources directory and add a new <code>styles.xml</code> file. Adapt your custom Jumio theme for dark mode. The SDK will switch automatically to match the system settings of the user device.</p>"},{"location":"integration_guide/#custom-ui-customization","title":"Custom UI customization","text":"<p>If you implement your own UI, you can still customize how some views provided by the SDK look. In particular this means you can customize Jumio's scan overlay, NFC scanning and iProov Face liveness views at the moment.</p> <p>By following the steps explained in Default UI customization you can see potential attributes to override in the generated XML file.</p>"},{"location":"integration_guide/#security","title":"Security","text":"<p>All SDK related traffic is sent over HTTPS using TLS and public key pinning. Additionally, the information itself within the transmission is also encrypted utilizing Application Layer Encryption (ALE). ALE is a Jumio custom-designed security protocol that utilizes RSA-OAEP and AES-256 to ensure that the data cannot be read or manipulated even if the traffic was captured.</p>"},{"location":"integration_guide/#support","title":"Support","text":""},{"location":"integration_guide/#licenses","title":"Licenses","text":"<p>The software contains third-party open source software. For more information, see licenses.</p> <p>This software is based in part on the work of the Independent JPEG Group.</p>"},{"location":"integration_guide/#contact","title":"Contact","text":"<p>If you have any questions regarding our implementation guide please contact Jumio Customer Service at support@jumio.com. The Jumio online helpdesk contains a wealth of information regarding our services including demo videos, product descriptions, FAQs, and other resources that can help to get you started with Jumio.</p>"},{"location":"integration_guide/#copyright","title":"Copyright","text":"<p>\u00a9 Jumio Corporation, 395 Page Mill Road, Suite 150, Palo Alto, CA 94306</p> <p>The source code and software available on this website (\u201cSoftware\u201d) is provided by Jumio Corp. or its affiliated group companies (\u201cJumio\u201d) \"as is\u201d and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. In no event shall Jumio be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including but not limited to procurement of substitute goods or services, loss of use, data, profits, or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this Software, even if advised of the possibility of such damage.</p> <p>In any case, your use of this Software is subject to the terms and conditions that apply to your contractual relationship with Jumio. As regards Jumio\u2019s privacy practices, please see our privacy notice available here: Privacy Policy.</p>"},{"location":"known_issues/","title":"Known Issues","text":""},{"location":"known_issues/#known-issues","title":"Known Issues","text":""},{"location":"known_issues/#sdk-version-400-and-above","title":"SDK Version 4.0.0 and AboveDuplicate Files for 'libc++_shared.so' Library","text":"<p>If build fails with error message:</p> <p>2 files found with path 'lib/arm6-v8a/libc++_shared.so' from inputs ...</p> <p>Please add the following <code>packagingOptions</code> to the configuration in your <code>build.gradle</code> file:</p> <pre><code>android{\n  packagingOptions {\n      pickFirst 'lib/armeabi-v7a/libc++_shared.so'\n      pickFirst 'lib/arm64-v8a/libc++_shared.so'\n  }\n}\n\n</code></pre>"},{"location":"known_issues/#sdk-version-392-and-400","title":"SDK Version 3.9.2 and 4.0.0","text":""},{"location":"known_issues/#face-scan-crash-at-start","title":"Face Scan Crash at Start","text":"<p>If the face scan crashes without warning on camera start and/or the following error message is displayed:    </p> <p>java.lang.SecurityException: To use the sampling rate of 0 microseconds, app needs to declare the normal permission HIGH_SAMPLING_RATE_SENSORS.</p> <p>Please make sure to add the following permission to your <code>AndroidManifest.xml</code> file:</p> <pre><code>&lt;uses-permission android:name=\"android.permission.HIGH_SAMPLING_RATE_SENSORS\"/&gt;\n</code></pre>"},{"location":"known_issues/#sdk-version-390","title":"SDK Version 3.9.0","text":""},{"location":"known_issues/#custom-ui","title":"Custom UI","text":"<ul> <li>Make sure to display the <code>NetverifyCustomScanView</code> only AFTER calling <code>startScan()</code> as done in our Sample, to ensure that the scan presenter is fully initialized and the camera callback <code>onNetverifyCameraAvailable()</code> will be fired.</li> </ul>"},{"location":"known_issues/#sdk-version-380-and-newer","title":"SDK Version 3.8.0 and Newer","text":""},{"location":"known_issues/#stuck-on-processing-documents-screen","title":"Stuck on 'Processing Documents' Screen","text":"<p>If user is getting stuck indefinitely after scanning process during 'Processing documents' stage without a callback or error message, please make sure the following dependencies</p> <pre><code>classpath \"org.jetbrains.kotlin:kotlin-serialization:$kotlin_version  \n\napply plugin: 'kotlinx-serialization'\n\ndependencies {  \n  ...\n  implementation \"org.jetbrains.kotlinx:kotlinx-serialization-core:1.0.0\"\n  implementation \"org.jetbrains.kotlinx:kotlinx-serialization-json:1.0.0\"\n  ...\n}\n</code></pre> <p>have been included in your <code>build.gradle</code> file. Missing Kotlin serialization will result in infinite loading without a callback.</p> <p>Please also refer to the 3.8.0 \"Dependency Changes\" section of our transition guide and the <code>build.gradle</code>(https://github.com/Jumio/mobile-sdk-android/blob/master/sample/JumioMobileSample/build.gradle) of our sample application for additional information.</p>"},{"location":"known_issues/#fallback-to-manual-capturing-using-iproov","title":"Fallback to Manual Capturing Using iProov","text":"<p>In some rare cases, the iproov Token Call can take too long to complete, which means the token is not yet available when the decision for the Liveness Vendor is made. When this happens, the scan mode <code>FACE_MANUAL</code> (Manual Capturing) will be used as a fallback. This also applies to Tablets and devices running on Android Version 5 (\"Lollipop\") or lower.</p> <p>Note: This is most likely to happen for applications implementing CustomUI that start with face scanning directly.</p>"},{"location":"known_issues/#issues-with-okhttp3-dependency-using-iproov","title":"Issues with okhttp3 Dependency Using iProov","text":"<p>iProov indirectly depends on okhttp 3.8.1. As of now, issues related to okhttp have been due to the use of okhttp 4.x.</p> <p>This can be solved by downgrading the dependency that provides 4.x, by excluding the okhttp package from that dependency, or by a combination of both of these. (Please note that a 3.x version is not necessarily older than 4.x one.)</p> <p>Please also refer to iProov FAQ for further information.</p>"},{"location":"known_issues/#jetifier-issues","title":"Jetifier Issues","text":"<p>Due to a bug in the Jetifier, the Bouncycastle library needs to be added to the Jetifiers ignorelist in the <code>gradle.properties</code></p> <pre><code>android.jetifier.blacklist=bcprov-jdk15on\n</code></pre> <p>Please note that the naming of this will change with the Android Gradle Plugin 4 release and will become <code>android.jetifier.ignorelist</code></p>"},{"location":"known_issues/#custom-ui_1","title":"Custom UI","text":"<p>On using iProov in CustomUI, in case <code>NetverifySDKController$retry</code> function is called for an error EXX0000, the SDK can fail with the following exception: <code>java.lang.NoClassDefFoundError: Failed resolution of: Lcom/jumio/zoom/custom/ZoomCustomScanPresenter</code>. This issue was fixed in SDK version 3.9.0. As a workaround it is possible to only add <code>implementation \"com.jumio.android:zoom:3.8.0@aar\"</code> to the build.gradle dependencies.</p>"},{"location":"known_issues/#sdk-version-37x","title":"SDK Version 3.7.x","text":""},{"location":"known_issues/#kotlin-integration","title":"Kotlin Integration","text":"<p>Since the Jumio SDK is partly written in Kotlin, it is necessary to add the Kotlin standard library dependency to your project, even if the project itself if written in Java.</p>"},{"location":"known_issues/#miscellaneous","title":"Miscellaneous","text":""},{"location":"known_issues/#static-interface-methods-are-only-supported-with-android-n","title":"Static Interface Methods Are only Supported with Android N","text":"<p>Error message \"Static interface methods are only supported with Android N\" will be displayed when Java 8 compatibility is not enabled. In this case, please make sure to enable compatibility in your <code>build.gradle</code> file:</p> <pre><code>android {\n...\n  compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n}\n</code></pre>"},{"location":"known_issues/#sdk-crashes-trying-to-display-animations-android-version-5-and-lower","title":"SDK Crashes Trying to Display Animations (Android Version 5 and Lower)","text":"<p>Running the SDK on API Level 21/Android Version 5 (\"Lollipop\") or lower, the application might crash when trying to display Jumio animations. In this case it is necessary to add the line <code>AppCompatDelegate.setCompatVectorFromResourcesEnabled(true)</code> to the <code>onCreate()</code> method of your application or <code>Activity</code>, ideally before <code>setContentView()</code> is called.</p> <p>Note: Refer to required for vector drawable compat handling for further information.</p>"},{"location":"known_issues/#country-missing-from-the-country-list","title":"Country Missing from the Country List","text":"<p>Countries with documents that are MRZ-capable (which is the case for most passports) might not be available if the necessary MRZ dependency is missing. The dependency in question is:</p> <pre><code>implementation \"com.jumio.android:nv-mrz:3.9.0@aar\"\n</code></pre> <p>Countries with documents that have a barcode might not be available if the necessary MRZ dependency is missing. The dependency in question is:</p> <pre><code>implementation \"com.jumio.android:nv-barcode:3.9.0@aar\"\n</code></pre> <p>A complete list of all dependencies can be found here.</p> <p>Note: Version numbers may vary.</p>"},{"location":"maintenance_policy/","title":"Maintenance","text":""},{"location":"maintenance_policy/#maintenance-and-support-policy","title":"Maintenance and Support Policy","text":""},{"location":"maintenance_policy/#overview","title":"Overview","text":"<p>This document outlines the maintenance policy for Jumio\u2019s Software Development Kits (\u201cSDKs\u201d), including Mobile and Web SDK and their dependencies. Our SDK releases are published publicly as indicated in our documentation as well as to package managers. Documentation and sample implementations are available as source code on GitHub (Android and iOS).</p> <p>We are consistently updating the Jumio SDKs in order to provide the best possible experience for you. Upgrading to the latest SDK version will not only ensure you benefit from various performance enhancements and bug fixes, but will also allow you to take advantage of new capabilities. All releases undergo comprehensive testing by our teams before being deployed.</p> <p>If you are using a Mobile SDK, please ensure your apps have been released and your end-users have updated before the End-of-Support date. Jumio does not provide support after the End-of-Support date.</p> <p>Customers should review the Jumio Terms and Conditions for requirements related to the implementation of updates.</p>"},{"location":"maintenance_policy/#versioning","title":"Versioning","text":"<p>Jumio SDK release versions are in the form of X.Y.Z: * X major version - very rarely updated * Y minor version - normally updated once in a quarter * Z patch version - updated on demand</p> <p>Major versions of Jumio\u2019s SDKs are released rarely, and only in case of substantial changes to support new features and patterns. Breaking changes can happen in Major and Minor versions. Applications need to be updated in order for them to work with the newest SDK version. Breaking changes are highlighted in our Android and iOS implementation guides for each release.</p> <p>Jumio will only provide patches or additional updates on the latest version regardless if it\u2019s Major, Minor or Patch.</p>"},{"location":"maintenance_policy/#sdk-version-lifecycle","title":"SDK Version Lifecycle","text":"<p>The life-cycle for SDK versions consists of these phases, which are outlined below: * Developer Preview (Phase 0) - During this phase, SDKs are not supported, must not be used in production environments, and are meant for early access and feedback purposes only. It is possible for future releases to introduce breaking changes. It can be alpha, beta, or release candidate. * General availability / Full support (Phase 1) - During this phase, SDKs are fully supported. Jumio will provide active support on this version and will provide required bug fixes or security fixes within new / upcoming versions (major, minor, patch). * End-of-Support (Phase 2) - Each SDK version reaches end of support 9 months after the release date. Issues that appear after the End-of-Support date will only be addressed in the upcoming SDK releases. Previously published releases will continue to be available via public package managers and the code will remain on GitHub. Use of an SDK that has reached End-of-Support is done at the business customers\u2019 discretion. We recommend upgrading to the latest version. * End-of-Life (Phase 3) - By default, our SDK will reach the end of life 24 months after the release date. The SDK may continue to work but Jumio will no longer provide support or updates. Customers will be notified at least 3 months prior to the end of life of a product should it be less than 24 months.</p> <p>The following table is a visual representation of the SDK 4.x.x version life-cycle. SDK 3.x.x End-of-Life is set to December 31, 2023.</p> Version Release End of Support End of Life 4.6.0 5 June 2023 5 March 2024 5 June 2025 4.5.0 14 April 2023 14 January 2024 14 April 2025 4.4.1 18 January 2023 18 October 2023 18 January 2025 4.4.0 20 December 2022 20 September 2023 20 December 2024 4.3.0 30 August 2022 30 May 2023 30 August 2024 4.2.0 25 May 2022 25 February 2023 25 May 2024 4.1.0 28 February 2022 28 November 2022 28 February 2024 4.0.0 16 November 2021 16 August 2022 16 November 2023"},{"location":"transition_guide/","title":"Transition Guide","text":""},{"location":"transition_guide/#transition-guide-for-android-sdk","title":"Transition Guide for Android SDK","text":"<p>This section covers all technical changes that should be considered when updating from previous versions, including, but not exclusively: API breaking changes or new functionality in the public API, major dependency changes, attribute changes, deprecation notices.</p> <p>\u26a0\ufe0f\u00a0\u00a0When updating your SDK version, all changes/updates made in in the meantime have to be taken into account and applied if necessary.    Example: If you're updating from SDK version 3.7.2 to 3.9.2, the changes outlined in 3.8.0, 3.9.0 and 3.9.1 are still relevant.</p>"},{"location":"transition_guide/#460","title":"4.6.0","text":""},{"location":"transition_guide/#public-api-changes","title":"Public API Changes","text":"<ul> <li><code>JUMIO_LIVENESS</code> has been added to <code>JumioScanMode</code></li> <li><code>MOVE_FACE_CLOSER</code> has been added to <code>JumioScanUpdate</code></li> <li><code>FACE_TOO_CLOSE</code> has been added to <code>JumioScanUpdate</code></li> </ul>"},{"location":"transition_guide/#customization-changes","title":"Customization Changes","text":"<ul> <li>A new customization theme <code>&lt;item name=\"jumio_face_animation_customization\"&gt;@style/CustomFaceHelp&lt;/item&gt;</code> has been added to help customize the newly added Jumio Liveness solution. This style includes the following attributes:</li> <li><code>&lt;item name=\"jumio_face_animation_foreground\"&gt;</code></li> <li> <p><code>&lt;item name=\"jumio_face_animation_background\"&gt;</code></p> </li> <li> <p>The following customization attributes have been added to <code>@style/CustomOverlay</code> theme:</p> </li> <li><code>&lt;item name=\"jumio_scanOverlay\"&gt;</code></li> <li><code>&lt;item name=\"jumio_scanOverlay_livenessStrokeAnimation\"&gt;</code></li> <li> <p><code>&lt;item name=\"jumio_scanOverlay_livenessStrokeAnimationCompleted&gt;</code> </p> </li> <li> <p>The following customization attributes have been removed from <code>@style/CustomIproov</code> theme:</p> </li> <li>~~<code>&lt;item name=\"iproov_animation_foreground\"&gt;</code>~~</li> <li> <p>~~<code>&lt;item name=\"iproov_animation_background\"&gt;</code>~~</p> </li> <li> <p>See also: Jumio sample <code>styles.xml</code></p> </li> </ul>"},{"location":"transition_guide/#dependency-updates","title":"Dependency Updates","text":"<ul> <li>NEW Liveness dependency: <code>implementation \"com.jumio.android:liveness:4.6.0\"</code></li> </ul>"},{"location":"transition_guide/#450","title":"4.5.0","text":""},{"location":"transition_guide/#public-api-changes_1","title":"Public API Changes","text":"<ul> <li> <p>~~<code>onPause</code>~~ has been removed from JumioScanPart</p> </li> <li> <p><code>JumioError.code</code> format updated from <code>[A][x][yyyy]</code> to <code>[A][xx][yyyy]</code></p> </li> <li> <p>Property <code>countries</code> of <code>JumioIDCredential</code> has been deprecated. Instead the following new property and functions have been added:</p> <ul> <li><code>JumioIDCredential.supportedCountries</code></li> <li><code>JumioIDCredential.getPhysicalDocumentsForCountry(countryCode:)</code></li> <li><code>JumioIDCredential.getDigitalDocumentsForCountry(countryCode:)</code></li> </ul> </li> <li> <p><code>JumioDeepLinkHandler</code> has been added</p> </li> <li> <p><code>JumioPhysicalDocument</code> and <code>JumioDigitalDocument</code> have been added</p> </li> <li> <p><code>JumioDocument</code> type has changed to interface. (Original <code>JumioDocument</code> class has been replaced by <code>JumioPhysicalDocument</code>)</p> </li> <li> <p><code>DIGITAL</code> has been added in <code>JumioCredentialPart</code></p> </li> <li> <p><code>DIGITAL_IDENTITY_VIEW</code> and <code>THIRD_PARTY_VERIFICATION</code> have been added in <code>JumioScanStep</code></p> </li> <li> <p><code>JumioRetryReasonDigitalIdentity</code> has been added</p> </li> <li> <p><code>JumioConsentItem</code> class and <code>JumioConsentType</code> enum have been added</p> </li> <li> <p><code>onInitialized()</code> callback has been changed from ~~<code>onInitialized(credentials: List&lt;JumioCredentialInfo&gt;, policyUrl: String?)</code>~~ to <code>onInitialized(credentials: List&lt;JumioCredentialInfo&gt;, consentItems: List&lt;JumioConsentItems&gt;?)</code></p> </li> <li>Please refer to the Consent Handling section in our integration guide for more details.</li> </ul>"},{"location":"transition_guide/#localization-keys","title":"Localization Keys","text":"<p>The following keys have been added to <code>strings.xml</code>:   * jumio_idtype_di   * jumio_di_vendor_selection_title   * jumio_di_retry_unknown   * jumio_di_retry_third_party_verification_error   * jumio_di_retry_service_error   * jumio_di_retry_expired   * jumio_di_back_to_document_selection</p>"},{"location":"transition_guide/#dependency-updates_1","title":"Dependency Updates","text":"<ul> <li>IProov update: ~~<code>\"com.iproov.sdk:iproov:8.0.3\"</code>~~ is replaced by <code>\"com.iproov.sdk:iproov:8.3.1\"</code></li> </ul>"},{"location":"transition_guide/#441","title":"4.4.1","text":"<p>No backward incompatible changes</p>"},{"location":"transition_guide/#440","title":"4.4.0","text":""},{"location":"transition_guide/#public-api-changes_2","title":"Public API Changes","text":"<ul> <li><code>credentialParts</code> property of <code>JumioCredential</code> class has been changed from <code>ArrayList&lt;JumioCredentialPart&gt;</code> to <code>List&lt;JumioCredentialPart&gt;</code></li> <li><code>JumioConfirmationHandler</code> has been added. Attach a JumioScanPart to this class to retrieve all accepted images and render them to <code>JumioConfirmationView</code> objects for confirmation.</li> <li><code>JumioRejectHandler</code> has been added. Attach a JumioScanPart to this class to retrieve all rejected images and render them to <code>JumioRejectView</code> objects for retaking.</li> <li>Functions in <code>JumioConfirmationView</code> have been moved to <code>JumioConfirmationHandler</code>.</li> <li>Functions in <code>JumioRejectView</code> have been moved to <code>JumioRejectHandler</code></li> <li><code>MULTIPART</code> has been added in <code>JumioCredentialPart</code> as a new Autocapture scan part: Instead of having a single scan part for all parts of a document (front, back), there is now a single <code>MULTIPART</code> scan part that combines the two. Within this scan part all needed parts of a document are captured at once.</li> <li><code>NEXT_PART</code> has been added in <code>JumioScanStep</code>: This scan step shows that the previous part has been captured and the next one can be started (e.g. frontside has been captured, now switch to the backside of the document)</li> </ul>"},{"location":"transition_guide/#customization-updates","title":"Customization Updates","text":"<ul> <li>Attributes changed and added to <code>Iproov.Customization</code> theme</li> </ul>"},{"location":"transition_guide/#dependency-updates_2","title":"Dependency Updates","text":"<ul> <li>IProov update: ~~<code>\"com.iproov.sdk:iproov:7.5.0\"</code>~~ is replaced by <code>\"com.iproov.sdk:iproov:8.0.3\"</code></li> </ul>"},{"location":"transition_guide/#430","title":"4.3.0","text":""},{"location":"transition_guide/#minimum-sdk-version-changes","title":"Minimum SDK Version Changes","text":"<ul> <li>minSdkVersion has been increased to 21. The SDK can still be integrated in Apps that support lower minSdkVersions - check if the platform is supported before initializing the JumioSDK, otherwise it will throw a PlatformNotSupportedException.</li> </ul>"},{"location":"transition_guide/#dependency-updates_3","title":"Dependency Updates","text":"<ul> <li>IProov update: ~~<code>\"com.iproov.sdk:iproov:7.2.0\"</code>~~ is replaced by <code>\"com.iproov.sdk:iproov:7.5.0\"</code></li> </ul>"},{"location":"transition_guide/#public-api-changes_3","title":"Public API Changes","text":"<ul> <li>Document Verification is now supported. Please check the Integration Guide for more information.</li> </ul>"},{"location":"transition_guide/#public-api-changes_4","title":"Public API Changes","text":"<ul> <li>~~<code>JumioCameraPosition</code>~~ from package <code>com.jumio.sdk.enums</code> in <code>com.jumio.sdk:core</code> is replaced by <code>JumioCameraFacing</code></li> <li><code>JumioAcquireMode</code> has been added to package <code>com.jumio.sdk.enums</code> in <code>com.jumio.sdk:core</code>, containing fields <code>FILE</code> and <code>CAMERA</code></li> <li><code>JumioDataCredential</code> class has been added for handling of Device Fingerprinting</li> <li><code>JumioDocumentCredential</code> class has been added for Document Verification handling</li> </ul>"},{"location":"transition_guide/#420","title":"4.2.0","text":""},{"location":"transition_guide/#public-api-changes_5","title":"Public API Changes","text":"<ul> <li>In JumioControllerInterface the signature of function <code>onInitialized</code> has been changed. Parameter <code>credentials</code> has been changed from <code>ArrayList&lt;JumioCredentialInfo&gt;</code> to <code>List&lt;JumioCredentialInfo&gt;</code></li> <li>In JumioResult field <code>credentialInfos</code> has been changed from <code>ArrayList&lt;JumioCredentialInfo&gt;?</code> to <code>List&lt;JumioCredentialInfo&gt;?</code></li> <li><code>JumioScanSide</code> from package <code>com.jumio.sdk.enums</code> in <code>com.jumio.sdk:core</code> has been renamed to JumioCredentialPart</li> </ul>"},{"location":"transition_guide/#dependency-updates_4","title":"Dependency Updates","text":"<ul> <li>NEW Autocapture dependency (Beta): <code>implementation \"com.jumio.android:docfinder:4.2.0\"</code></li> </ul>"},{"location":"transition_guide/#customization-updates_1","title":"Customization Updates","text":"<ul> <li>Boolean <code>iproov_floating_prompt_enabled</code> has been added to <code>Iproov.Customization</code> theme</li> <li>Color attribute ~<code>iproov_footerTextColor</code> has been replaced with <code>iproov_promptTextColor</code> in <code>Iproov.Customization</code> theme</li> </ul>"},{"location":"transition_guide/#deprecation-notice","title":"Deprecation Notice","text":"<p>\u26a0\ufe0f\u00a0\u00a0SDK 4.2.0 will be the last SDK version supporting Android 4.4 (API level 19). All subsequent SDK versions will require at least Android 5.0 \"Lollipop\" (API level 21).</p>"},{"location":"transition_guide/#410","title":"4.1.0","text":""},{"location":"transition_guide/#dependency-updates_5","title":"Dependency Updates","text":"<ul> <li> <p>NEW Datadog dependency (optional): <code>implementation \"com.jumio.android:datadog:4.1.0\"</code></p> </li> <li> <p>IProov update: ~~<code>\"com.iproov.sdk:iproov:7.0.3\"</code>~~ is replace by <code>\"com.iproov.sdk:iproov:7.2.0\"</code></p> </li> </ul>"},{"location":"transition_guide/#customization-updates_2","title":"Customization Updates","text":"<ul> <li>Dark mode is now available. DefaultUI will switch automatically if system settings of the user device change.</li> <li>Dark mode can also be customized by creating a custom theme, utilizing <code>values-night</code> in the resources directory.</li> </ul>"},{"location":"transition_guide/#instant-feedback-reject-reasons","title":"Instant Feedback Reject Reasons","text":"<p>Added Instant Feedback functionality to give more granular user feedback with new reject reasons: * BLACK_WHITE_COPY * COLOR_PHOTOCOPY * DIGITAL_COPY * NOT_READABLE * NO_DOC * MISSING_BACK * MISSING_FRONT * BLURRY * MISSING_PART_DOC * DAMAGED_DOCUMENT * HIDDEN_PART_DOC * GLARE</p>"},{"location":"transition_guide/#400","title":"4.0.0","text":""},{"location":"transition_guide/#authentication","title":"Authentication","text":"<p>\u2139\ufe0f\u00a0\u00a0As of version 4.0.0 and onward, the SDK can only be used in combination with Jumio KYX or Jumio API v3. API v2 as well as using API token and secret to authenticate against the SDK will no longer be compatible.</p>"},{"location":"transition_guide/#dependency-updates_6","title":"Dependency Updates","text":"<ul> <li> <p>The repository declaration for ~~<code>jcenter()</code>~~ is replaced with <code>mavenCentral()</code> as JFrog will be shutting down JCenter</p> </li> <li> <p>Additionally to that, the repository declaration <code>gradlePluginPortal()</code> was added to mitigate the gradle build plugin dependency not being migrated to <code>mavenCentral()</code> yet.</p> </li> <li> <p>All AndroidX dependencies are now declared in the <code>.pom</code> files and resolved transitively by Gradle. The following AndroidX dependencies are used in the SDK, but do not have to be declared manually in the <code>build.gradle</code> anymore:</p> </li> <li><code>\"androidx.appcompat:appcompat:1.3.0\"</code></li> <li><code>\"com.google.android.material:material:1.4.0\"</code></li> <li><code>\"androidx.constraintlayout:constraintlayout:2.1.1\"</code></li> <li><code>\"androidx.lifecycle:lifecycle-livedata-ktx:2.3.1\"</code></li> <li><code>\"androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1\"</code></li> <li><code>\"androidx.lifecycle:lifecycle-viewmodel-savedstate:2.3.1\"</code></li> <li><code>\"androidx.lifecycle:lifecycle-extensions:2.2.0\"</code></li> <li><code>\"androidx.recyclerview:recyclerview:1.2.1\"</code></li> <li><code>\"androidx.fragment:fragment-ktx:1.3.6\"</code></li> <li> <p><code>\"androidx.navigation:navigation-ui-ktx:2.3.5\"</code> </p> </li> <li> <p>The Jumio liveness dependency <code>\"com.iproov.sdk:iproov:7.0.3\"</code> is referenced as a transitive dependency within the iProov module and does not have to be added manually to the <code>build.gradle</code> anymore.</p> </li> <li> <p><code>kotlin-parcelize</code> and <code>kotlinx-serialization</code> plugins, as well as the following dependencies have been removed:</p> </li> <li><code>org.jetbrains.kotlinx:kotlinx-serialization-core:1.0.0</code></li> <li><code>org.jetbrains.kotlinx:kotlinx-serialization-json:1.0.0</code></li> </ul>"},{"location":"transition_guide/#initialization-updates","title":"Initialization Updates","text":"<ul> <li>~~<code>apiToken</code>~~ and ~~<code>apiSecret</code>~~ are replaced by one-time <code>sdk.token</code></li> </ul>"},{"location":"transition_guide/#default-ui-updates","title":"Default UI Updates","text":"<p>As of SDK version 4.0.0, a lot of SDK parameters that previously could be set in the actual code are now contained within and provided by the <code>sdk.token</code>. These parameters have to be configured beforehand, during the API call that requests the token.</p> <p>Please refer to the Configuration section of our integration guides for a detailed description of all Default UI changes and updates.</p> <p>Information about which user journey (ID Verification, Identity Verification, Authentication, ...) the SDK is going to provide now also has to be specified during the API call that request the <code>sdk.token</code>.</p> <p>For more details on individual Jumio workflows, please refer to Workflow Descriptions in our guides.</p>"},{"location":"transition_guide/#custom-ui-updates","title":"Custom UI Updates","text":"<p>As of SDK version 4.0.0, Custom UI workflow has been completely restructured.</p> <p>Please refer to the Custom UI section of our integration guides for a detailed description of all Custom UI changes and updates.</p>"},{"location":"transition_guide/#392","title":"3.9.2","text":""},{"location":"transition_guide/#dependency-changes","title":"Dependency Changes","text":"<ul> <li>IProov update: ~~<code>\"com.iproov.sdk:iproov:6.3.1\"</code>~~ is replaced by <code>\"com.iproov.sdk:iproov:6.4.1\"</code>. This version improves conversion and offers additional customization options.</li> </ul>"},{"location":"transition_guide/#customization-updates_3","title":"Customization Updates","text":"<ul> <li>Added additional customization attributes to the IProov theme <code>Iproov.Customization</code>:</li> <li><code>iproov_headerTextColor</code></li> <li><code>iproov_headerBackgroundColor</code></li> <li><code>iproov_footerTextColor</code></li> <li><code>iproov_footerBackgroundColor</code></li> <li><code>iproov_livenessScanningTintColor</code></li> <li><code>iproov_progressBarColor</code></li> </ul>"},{"location":"transition_guide/#391","title":"3.9.1","text":""},{"location":"transition_guide/#dependency-changes_1","title":"Dependency Changes","text":"<ul> <li>IProov update: ~~<code>\"com.iproov.sdk:iproov:6.3.0\"</code>~~ is replaced by <code>\"com.iproov.sdk:iproov:6.3.1\"</code>. This version fixes cross-dependency problems with okhttp 4.x</li> </ul>"},{"location":"transition_guide/#customization-updates_4","title":"Customization Updates","text":"<ul> <li>Added attribute <code>iproov_backgroundColor</code> to the IProov theme <code>Iproov.Customization</code> to allow customization of the IProov background color during scanning.</li> </ul>"},{"location":"transition_guide/#390","title":"3.9.0","text":""},{"location":"transition_guide/#dependency-changes_2","title":"Dependency Changes","text":"<ul> <li> <p>IProov update: ~~<code>\"com.iproov.sdk:iproov:6.1.0\"</code>~~ is replaced by \"com.iproov.sdk:iproov:6.3.0\"</p> </li> <li> <p>Room update: ~~<code>\"androidx.room:room-runtime:2.2.5\"</code>~~ is replaced by \"androidx.room:room-runtime:2.2.6\"</p> </li> <li> <p>AndroidX Kotlin Extension update: ~~<code>\"androidx.core:core-ktx:1.3.1\"</code>~~ is replaced by <code>\"androidx.core:core-ktx:1.3.2\"</code></p> </li> <li> <p>JMRTD update: ~~<code>\"org.jmrtd:jmrtd:0.7.19\"</code>~~ is replaced by <code>\"org.jmrtd:jmrtd:0.7.24\"</code></p> </li> <li> <p>Bouncycastle update: ~~<code>\"org.bouncycastle:bcprov-jdk15on:1.65\"</code>~~ is replaced by <code>\"org.bouncycastle:bcprov-jdk15on:1.67\"</code></p> </li> <li> <p>REMOVE LocalBroadcastManager ~~<code>\"androidx.localbroadcastmanager:localbroadcastmanager:1.0.0\"</code>~~</p> </li> <li> <p>REPLACE ~~<code>apply plugin: 'kotlin-android-extensions</code>~~ with <code>apply plugin: kotlin-parcelize</code>. The extensions plugin has been deprecated by Google. The parcelize functionality has been extracted to a separate plugin.</p> </li> </ul>"},{"location":"transition_guide/#public-api-changes_6","title":"Public API Changes","text":"<ul> <li> <p><code>setEnableEMRTD(boolean enable)</code> has been removed from NetverifySDK</p> </li> <li> <p><code>recreate(Activity rootActivity)</code> has been added to NetverifySDK - this needs to be called in case the hosting activity that was passed in <code>create</code> is recreated.</p> </li> </ul>"},{"location":"transition_guide/#custom-ui-changes","title":"Custom UI Changes","text":"<ul> <li><code>NetverifyCustomSDKInterface$onNetverifyFinished</code> all parameters were replaced with a Bundle. The keys are defined as constants in the <code>NetverifySDK.EXTRA_SCAN_REFERENCE</code>:</li> <li><code>EXTRA_SCAN_REFERENCE</code></li> <li><code>EXTRA_ACCOUNT_ID</code></li> <li> <p><code>EXTRA_SCAN_DATA</code></p> </li> <li> <p><code>NetverifyCustomSDKInterface$onNetverifyError</code> added an optional parameter <code>accountId</code></p> </li> <li> <p>New methods for handling host activity lifecycle changes have been added:</p> </li> <li> <p><code>recreate(Activity activity, NetverifyCustomSDKInterface netverifyCustomSDKInterface)</code> has been added to NetverifyCustomSDKController - this needs to be called in case the hosting activity is recreated.</p> </li> <li> <p><code>recreate(NetverifyCustomScanView scanView, NetverifyCustomConfirmationView confirmationView, NetverifyCustomScanInterface netverifyCustomScanInterface)</code> has been added to NetverifyCustomScanPresenter - this needs to be called in case the hosting activity is recreated.</p> </li> <li> <p>The initialization and start of scan presenters has been split. This allows displaying a help view with the help animation prior to starting the scan presenter:</p> </li> <li> <p><code>startScanForPart(ScanSide scanSide, NetverifyCustomScanView scanView, NetverifyCustomConfirmationView confirmationView, NetverifyCustomScanInterface scanViewInterface</code> has been replaced with <code>initScanForPart(ScanSide scanSide, NetverifyCustomScanView scanView, NetverifyCustomConfirmationView confirmationView, NetverifyCustomScanInterface scanViewInterface)</code></p> </li> <li> <p>The following method was added to <code>NetverifyCustomScanPresenter</code> to trigger scanning start after the initialization. This method needs to be called on the <code>NetverifyCustomScanPresenter</code> after it was initialized with <code>initScanForPart(..)</code>.</p> </li> </ul> <pre><code>/**\n     * Starts a scan after a scan presenter has been initialized\n     */\n    void startScan();\n</code></pre> <ul> <li> <p>Make sure to display the <code>NetverifyCustomScanView</code> only AFTER calling <code>startScan()</code> as done in our Sample, to ensure that the scan presenter is fully initialized and the camera callback <code>onNetverifyCameraAvailable()</code> will be fired.</p> </li> <li> <p>~~<code>NetverifyScanMode.FACE</code>~~ is replaced with</p> </li> <li> <p><code>NetverifyScanMode.FACE_MANUAL</code> for manual face scanning</p> </li> <li> <p><code>NetverifyScanMode.FACE_IPROOV</code> for face scanning with IProov</p> </li> <li> <p><code>NetverifyScanMode.FACE_ZOOM</code> for face scanning with Facetec ZoOm</p> </li> </ul>"},{"location":"transition_guide/#jetifier-adaptions","title":"Jetifier adaptions","text":"<p>Due to a bug in the Jetifier, the Bouncycastle library needs to be added to the Jetifiers ignorelist in the <code>gradle.properties</code></p> <pre><code>android.jetifier.blacklist=bcprov-jdk15on\n</code></pre> <p>Please note that the naming of this will change with the Android Gradle Plugin 4 release and will become <code>android.jetifier.ignorelist</code></p>"},{"location":"transition_guide/#380","title":"3.8.0","text":""},{"location":"transition_guide/#dependency-changes_3","title":"Dependency Changes","text":"<ul> <li> <p>NEW AndroidX Kotlin Extension: <code>\"androidx.core:core-ktx:1.3.1\"</code></p> </li> <li> <p>NEW Kotlin dependency: <code>\"org.jetbrains.kotlinx:kotlinx-serialization-core:1.0.0\"</code></p> </li> <li> <p>NEW Kotlin dependency: <code>\"org.jetbrains.kotlinx:kotlinx-serialization-json:1.0.0\"</code></p> </li> <li> <p>NEW Kotlin plugin: <code>\"apply plugin: 'kotlinx-serialization\"</code></p> </li> <li> <p>NEW classpath definition: <code>\"classpath \"org.jetbrains.kotlin:kotlin-serialization:$kotlin_version\"</code></p> </li> <li> <p>REPLACE Jumio Face: ~~<code>\"com.jumio.android:face\"</code>~~ with either:</p> </li> <li><code>\"com.jumio.android:iproov:3.8.0@aar\"</code> and <code>implementation (\"com.iproov.sdk:iproov:6.1.0\"){ exclude group: 'org.json', module:'json' }</code> or</li> <li> <p><code>\"com.jumio.android:zoom:3.8.0@aar\"</code> and <code>\"com.facetec:zoom-authentication:8.12.1@aar\"</code></p> </li> <li> <p>AndroidX ConstraintLayout update: ~~<code>\"androidx.constraintlayout:constraintlayout:2.0.1\"</code>~~ is replaced by <code>\"androidx.constraintlayout:constraintlayout:2.0.4\"</code></p> </li> <li> <p>AndroidX Appcompat update: ~~<code>\"androidx.appcompat:appcompat:1.1.0\"</code>~~ is replaced by <code>\"androidx.appcompat:appcompat:1.2.0\"</code></p> </li> <li> <p>Google Play Services update: ~~<code>\"com.google.android.gms:play-services-vision:19.0.0\"</code>~~ is replaced by <code>\"com.google.android.gms:play-services-vision:20.1.2\"</code></p> </li> <li> <p>Google Material Library update: ~~<code>\"com.google.android.material:material:1.1.0\"</code>~~ is replaced by <code>\"com.google.android.material:material:1.2.1\"</code></p> </li> </ul>"},{"location":"transition_guide/#custom-ui-changes_1","title":"Custom UI Changes","text":"<ul> <li> <p><code>NetverifyCustomSDKController$setDocumentConfiguration</code> does not return a List with all required ScanSides anymore - they are now available as a parameter of <code>NetverifyCustomSDKInterface$onNetverifyResourcesLoaded</code></p> </li> <li> <p>Method <code>onNetverifyPrepareScanning()</code> added to <code>NetverifyCustomScanInterface</code> - indicates that the SDK is now loading information</p> </li> </ul>"},{"location":"transition_guide/#proguard-changes","title":"Proguard Changes","text":"<p>Added the line <code>-keep public class com.iproov.sdk.IProov {public *; }</code> to consumer Proguard rules.</p>"},{"location":"transition_guide/#strings-and-style-changes","title":"Strings and Style Changes","text":"<p>Several additions and changes, mostly in regards to the new liveness flow.</p> <ul> <li> <p>Button style: ~~<code>&lt;item name=\"netverify_confirmationPositiveStyle\"&gt; @style/Custom.Netverify.Confirmation.MaterialButton &lt;/item&gt;</code>~~ is replaced by <code>&lt;item name=\"materialButtonStyle\"&gt;@style/Custom.Netverify.Confirmation.MaterialButton&lt;/item&gt;</code></p> </li> <li> <p>Button style: ~~<code>&lt;item name=\"netverify_confirmationNegativeStyle\"&gt; @style/Custom.Netverify.Confirmation.MaterialButton.Outlined&lt;/item&gt;</code>~~ is replaced by <code>&lt;item name=\"materialButtonOutlinedStyle\"&gt;@style/Custom.Netverify.Confirmation.MaterialButton.Outlined&lt;/item&gt;</code></p> </li> <li> <p>NEW IProov attribute: <code>&lt;item name=\"iproov_customization\"&gt;@style/CustomIproov&lt;/item&gt;</code></p> </li> <li> <p>NEW IProov theme: <code>&lt;style name=\"CustomIproov\" parent=\"Iproov.Customization\"&gt;</code></p> </li> <li> <p>For changes in <code>String.xml</code> file changes please refer to the sample project.</p> </li> </ul>"},{"location":"transition_guide/#373","title":"3.7.3","text":""},{"location":"transition_guide/#custom-ui-changes_2","title":"Custom UI changes","text":"<ul> <li>The countryList parameter in NetverifyCustomSDKInterface$onNetverifyCountriesReceived has been changed from <code>HashMap</code> to <code>Map</code></li> </ul>"},{"location":"transition_guide/#zoom-customization-changes","title":"ZoOm Customization Changes","text":"<ul> <li>All the attributes starting with <code>face_</code> have been removed</li> <li>For a full guide please head over to the FAQ</li> </ul>"},{"location":"transition_guide/#error-code-change","title":"Error Code Change","text":"<p>Error code N (Access token for different product / Parts of access token are missing) has been added. Read more detailed information on this in chapter Error codes</p>"},{"location":"transition_guide/#372","title":"3.7.2","text":"<p>No backward incompatible changes</p>"},{"location":"transition_guide/#371","title":"3.7.1","text":"<p>No backward incompatible changes</p>"},{"location":"transition_guide/#370","title":"3.7.0","text":""},{"location":"transition_guide/#dependency-changes_4","title":"Dependency Changes","text":"<ul> <li>Zoom update: ~~\"com.facetec:zoom-authentication:8.0.11@aar\"~~ is replaced by \"com.facetec:zoom-authentication:8.12.1@aar\"</li> <li>Room updated: ~~\"androidx.room:room-runtime:2.2.3\"~~ is replaced by \"androidx.room:room-runtime:2.2.5\"</li> <li>JMRTD updated: ~~\"org.jmrtd:jmrtd:0.7.18\"~~ is replaced by \"org.jmrtd:jmrtd:0.7.19\"</li> <li>Bouncycastle updated: ~~\"org.bouncycastle:bcprov-jdk15on:1.64\"~~ is replaced by \"org.bouncycastle:bcprov-jdk15on:1.65\"</li> </ul>"},{"location":"transition_guide/#api-changes","title":"API Changes","text":"<ul> <li><code>getEMRTDStatus()</code> has been removed from NetverifyDocumentData</li> <li>New attributes for customization of the NFC help animation have been added to our <code>styles.xml</code>:</li> <li><code>netverify_nfc_passport_cover</code> - Outside passport cover color</li> <li><code>netverify_nfc_passport_page_dark</code> - Color of the last page inside the passport after opening</li> <li><code>netverify_nfc_passport_page_light</code> - Color of the flipped pages during opening</li> <li><code>netverify_nfc_passport_foreground</code> - Foreground color for the passport text and the phone screen</li> <li> <p><code>netverify_nfc_phone_background</code> - Frame color for the phone that is positioned on the passport</p> </li> <li> <p>Attribute <code>netverify_nfc_dialog_theme</code> has been removed and is not required any more</p> </li> <li>The position of the Jumio branding logo and privacy link changed to from bottom-right to center-top for all portrait scan views. In Custom UI, the top margin for this element can be adjusted using the following method <code>setBrandingLogoTopMargin(int topMargin)</code></li> </ul>"},{"location":"transition_guide/#customization-updates_5","title":"Customization Updates","text":"<ul> <li>Android Zoom screens update. Details can be found in Custom theme issues</li> </ul>"},{"location":"transition_guide/#localizable-strings","title":"Localizable Strings","text":"<p>Several additions and changes in regards to the Android Zoom screens update.</p> <p>Added strings: * <code>netverify_nfc_description_xxx</code> strings * <code>zoom_action_xxx</code> strings * <code>zoom_instructions_xxx</code> strings * <code>zoom_result_xxx</code> strings * <code>zoom_retry_xxx</code> strings</p> <p>Removed strings: * <code>netverify_nfc_bac_dialog_xxx</code> strings * <code>netverify_nfc_description_xxx</code> strings</p>"},{"location":"transition_guide/#362","title":"3.6.2","text":"<p>The Proguard keep rule <code>-keep class com.jumio.** { *; }</code> has to be added to your Proguard rules, if it wasn't added yet. Details can be found in chapter Proguard</p>"},{"location":"transition_guide/#361","title":"3.6.1","text":"<p>No backward incompatible changes</p>"},{"location":"transition_guide/#360","title":"3.6.0","text":""},{"location":"transition_guide/#dependency-changes_5","title":"Dependency Changes","text":"<p>AndroidX Material design library has been updated to version 1.1.0 * ~~\"com.google.android.material:material:1.0.0\"~~ is replaced by \"com.google.android.material:material:1.1.0\"</p> <p>Local broadcast manager dependency has been added mandatory due to the design library update where it was separated by Google * implementation \"androidx.localbroadcastmanager:localbroadcastmanager:1.0.0\"</p> <p>JMRTD is now added as a gradle dependency - if you use NFC scanning please make sure to add the new dependencies: * implementation \"org.jmrtd:jmrtd:0.7.18\" * implementation \"org.ejbca.cvc:cert-cvc:1.4.6\"</p>"},{"location":"transition_guide/#350","title":"3.5.0","text":""},{"location":"transition_guide/#error-code-change_1","title":"Error Code Change","text":"<ul> <li>Error code D (Wrong API credentials used, retry impossible) has been removed.</li> </ul>"},{"location":"transition_guide/#proguard-change","title":"Proguard Change","text":"<ul> <li>Consumer proguard rules have been added. All Jumio SDK proguard rules will now be applied automatically to the application when the Jumio Core library is included.</li> </ul>"},{"location":"transition_guide/#341","title":"3.4.1","text":""},{"location":"transition_guide/#api-changes-in-netverifycustomscaninterface","title":"API Changes in NetverifyCustomScanInterface","text":"<ul> <li>A new callback onNetverifyUserConsentRequired was added to NetverifyCustomScanInterface</li> </ul>"},{"location":"transition_guide/#api-changes-in-netverifycustomsdkcontroller","title":"API Changes in NetverifyCustomSDKController","text":"<ul> <li>A new method onUserConsented was added to NetverifyCustomSDKController</li> </ul>"},{"location":"transition_guide/#340","title":"3.4.0","text":""},{"location":"transition_guide/#customization-updates_6","title":"Customization Updates","text":"<ul> <li>The SDK now uses Material buttons instead of the old snackbar button styles on the confirmation view.</li> <li>Please check out the confirmation screens and the XML output in the Surface Tool for all adapted content. Changes:</li> <li>New style attribute confirmationIcon for customizing the info and warning icon on the confirmation screen.</li> <li>New confirmation button style Netverify.Confirmation.MaterialButton for the positive button.</li> <li>New confirmation button style Netverify.Confirmation.MaterialButton.Outlined for the negative button.</li> </ul>"},{"location":"transition_guide/#dependency-changes_6","title":"Dependency Changes","text":"<ul> <li>Constraint layout dependency androidx.constraintlayout:constraintlayout:1.1.3 or higher is now mandatory</li> <li>The following plugins are now required in the build.gradle of your application:</li> </ul> <pre><code>apply plugin: 'kotlin-android'\napply plugin: 'kotlin-android-extensions'\napply plugin: 'kotlin-kapt'\n</code></pre> <ul> <li>Dependency name and version change - com.facetec:zoom-authentication-hybrid:7.0.14 is replaced by com.facetec:zoom-authentication:8.0.11@aar</li> <li>~~androidx.appcompat:appcompat:1.0.2~~ is replaced by androidx.appcompat:appcompat:1.1.0</li> <li>~~androidx.room:room-runtime:2.0.0~~ is replaced by androidx.room:room-runtime:2.2.1</li> </ul>"},{"location":"transition_guide/#custom-ui-callbacks","title":"Custom UI Callbacks","text":"<ul> <li>~~onNetverifyDisplayFlipDocumentHint~~ has been removed</li> <li>A new parameter NetverifyConfirmationType was added to NetverifyCustomScanInterface$onNetverifyPresentConfirmationView</li> </ul>"},{"location":"transition_guide/#proguard-changes_1","title":"Proguard Changes","text":"<p><code>-dontwarn com.facetec.zoom.sdk.**</code> needs to be added</p>"},{"location":"transition_guide/#332","title":"3.3.2","text":"<p>No backward incompatible changes</p>"},{"location":"transition_guide/#331","title":"3.3.1","text":"<p>No backward incompatible changes</p>"},{"location":"transition_guide/#330","title":"3.3.0","text":""},{"location":"transition_guide/#deallocation-callback","title":"Deallocation Callback","text":"<p>Added a new method checkDeallocation in the NetverifySDK to check if the SDK resources have already been deallocated. The method requires a  NetverifyDeallocationCallback instance as a parameter and calls <code>onNetverifyDeallocated</code> once the SDK is deallocated. The checkDeallocation method should only be called once the SDK has returned a result and another SDK instance is required.</p>"},{"location":"transition_guide/#dependency-change","title":"Dependency Change","text":"<ul> <li>~~com.facetec:zoom-authentication-hybrid:7.0.12~~ is replaced by com.facetec:zoom-authentication-hybrid:7.0.14</li> </ul>"},{"location":"transition_guide/#date-changes","title":"Date Changes","text":"<p>All dates are now UTC based. This affects the dates in NetverifyDocumentData and NetverifyCustomNfcAccess</p>"},{"location":"transition_guide/#new-sdk-localizations-added","title":"New SDK Localizations Added","text":"<p>SDK Translations for the languages Italian and Portuguese have been added.</p>"},{"location":"transition_guide/#321","title":"3.2.1","text":""},{"location":"transition_guide/#fixed-a-face-scanning-problem-in-which-a-black-screen-was-shown-to-the-user","title":"Fixed a Face Scanning Problem in Which a Black Screen Was Shown to the User","text":""},{"location":"transition_guide/#320","title":"3.2.0","text":""},{"location":"transition_guide/#dependency-change_1","title":"Dependency Change","text":"<ul> <li>~~androidx.appcompat:appcompat:1.0.0~~ is replaced by androidx.appcompat:appcompat:1.0.2</li> <li>~~com.facetec:zoom-authentication-hybrid:7.0.9~~ is replaced by com.facetec:zoom-authentication-hybrid:7.0.12</li> </ul>"},{"location":"transition_guide/#api-changes-in-netverifycustomscaninterface_1","title":"API Changes in NetverifyCustomScanInterface","text":"<p>A new parameter NetverifyCancelReason was added to NetverifyCustomScanInterface$onNetverifyScanForPartCanceled</p>"},{"location":"transition_guide/#watchlist-screening","title":"Watchlist Screening","text":"<p>Two new methods for handling watchlist screening have been added. Please refer to the Netverify guide</p> <pre><code>netverifySDK.setWatchlistScreening(NVWatchlistScreening.ENABLED);\nnetverifySDK.setWatchlistSearchProfile(\"YOURPROFILENAME\");\n</code></pre>"},{"location":"transition_guide/#additional-functions-in-netverifycustomscaninterface","title":"Additional Functions in NetverifyCustomScanInterface","text":"<p>For the new NFC scanning functionality in custom ui, there has been some additions in NetverifyCustomScanInterface: <code>getNetverifyCustomNfcInterface()</code> should return an instance of NetverifyCustomNfcInterface or Null <code>onNetverifyStartNfcExtraction(NetverifyCustomNfcPresenter)</code> is called when the NFC scanning can be started. The NFC scanning is controlled with the provided instance of NetverifyCustomNfcPresenter</p>"},{"location":"transition_guide/#customization","title":"Customization","text":"<p>The following customization attribute have been added: <code>netverify_scanOverlayFill</code></p>"},{"location":"transition_guide/#new-fastfill-offline-token-required","title":"New Fastfill Offline Token Required","text":"<p>Due to a license model update in our Barcode implementation, it's necessary to regenerate the offline token when updating to version 3.2.0  </p>"},{"location":"transition_guide/#close-button-ccustomization-in-custom-ui","title":"Close Button cCustomization in Custom UI","text":"<p>The position and image of the close button for face scanning can now be customized. Please have a look at the NetverifyCustomScanView</p>"},{"location":"transition_guide/#custom-ui-help-animation-support","title":"Custom UI Help Animation Support","text":"<p>NetverifyCustomScanPresenter$getHelpAnimation has been added to get the specific help animation in case the scan part is canceled. An instance of  NetverifyCustomAnimationView needs to be passed where the animation is rendered in.</p>"},{"location":"transition_guide/#310","title":"3.1.0","text":""},{"location":"transition_guide/#dependency-changes_7","title":"Dependency Changes","text":"<ul> <li>~~com.madgag.spongycastle:prov:1.58.0.0~~ is replaced by org.bouncycastle:bcprov-jdk15on:1.61</li> <li>Proguard rules containing org.spongycastle have been replaced with org.bouncycastle</li> <li>~~com.facetec:zoom-authentication-hybrid:7.0.5~~ is replaced by com.facetec:zoom-authentication-hybrid:7.0.9</li> </ul>"},{"location":"transition_guide/#300","title":"3.0.0","text":""},{"location":"transition_guide/#renamed-dependency-nv-face-to-face","title":"Renamed Dependency NV-Face to Face","text":"<p>The dependency <code>com.jumio.android:nv-face</code> was renamed to <code>com.jumio.android:face</code>, reflecting the internal restructuring of the dependencies that was necessary for adding the new product Authentication</p>"},{"location":"transition_guide/#renamed-public-api-methods-and-parameters","title":"Renamed Public API Methods and Parameters","text":"<p>The following methods and the related parameters have been renamed to ensure consistency across all platforms * <code>setRequireFaceMatch(..)</code> -&gt; <code>setEnableIdentityVerification(..)</code> * <code>setRequireVerification(..)</code> -&gt; <code>setEnableVerification(..)</code> * <code>setMerchantReportingCriteria(..)</code> -&gt; <code>setReportingCriteria(..)</code> * <code>setMerchantIdScanReference(..)</code> -&gt; <code>setCustomerInternalReference(..)</code> * <code>setCustomerId(..)</code> -&gt; <code>setUserReference(..)</code></p>"},{"location":"transition_guide/#additional-property-in-netverifycustomscanview","title":"Additional Property in NetverifyCustomScanView","text":"<p><code>setMode(..)</code> must be called before the view is used. Possible values: NetverifyCustomScanView.MODE_ID or NetverifyCustomScanView.MODE_FACE</p>"},{"location":"transition_guide/#2150","title":"2.15.0","text":""},{"location":"transition_guide/#added-room","title":"Added Room","text":"<p>Dependencies that have been added to the SDK: + androidx.room:room-runtime:2.0.0</p>"},{"location":"transition_guide/#added-3d-liveness","title":"Added 3D Liveness","text":""},{"location":"transition_guide/#dependency-changes_8","title":"Dependency Changes","text":"<ul> <li>com.jumio.android:nv-face:2.15.0@aar</li> <li>com.facetec:zoom-authentication-hybrid:7.0.2@aar</li> <li>~~com.jumio.android:nv-liveness:2.14.0@aar~~ The old liveness module is not supported anymore</li> </ul> <p>The Facetec Maven repository also needs to be added: maven { url 'http://maven.facetec.com' }</p>"},{"location":"transition_guide/#localization","title":"Localization","text":"<p>Please have a look at the strings-jumio-sdk.xml for all the new added strings prefixed with <code>zoom_</code>. The following strings have been removed: <code>netverify_scanview_liveness_follow_hint</code>, <code>netverify_scanview_liveness_move_closer</code>, <code>netverify_scanview_liveness_move_back</code>, <code>netverify_scanview_liveness_description</code>, <code>netverify_helpview_full_description_liveness_glasses</code>, <code>netverify_helpview_full_description_liveness_cap</code> and <code>netverify_helpview_full_description_liveness_light</code>.</p>"},{"location":"transition_guide/#customization_1","title":"Customization","text":"<p>The following customization attributes have been added: <code>netverify_scanOverlayFaceBackground</code>, <code>netverify_scanOverlayFaceFeedbackText</code>, <code>netverify_scanOverlayFaceFeedbackBackground</code>, <code>netverify_scanOverlayFaceProgress</code>, <code>netverify_scanOverlayFaceOval</code> The following customization attributes have been removed: <code>netverify_scanOverlayLivenessValid</code>, <code>netverify_scanOverlayLivenessInvalid</code>, <code>netverify_scanOverlayLivenessBackground</code>, <code>netverify_scanOverlayLivenessText</code></p>"},{"location":"transition_guide/#proguard","title":"Proguard","text":"<p>The following lines need to be added in your <code>proguard-rules.pro</code> file for 3D Liveness:</p> <pre><code>-keep class com.facetec.zoom.** { *; }\n-dontwarn javax.annotation.Nullable\n</code></pre>"},{"location":"transition_guide/#2140","title":"2.14.0","text":""},{"location":"transition_guide/#migrate-to-androidx","title":"Migrate to AndroidX","text":"<p>The support library was migrated to <code>AndroidX</code>. As the developer page outlines, this is a mandatory step since all new Support Library development and maintenance will occur in the AndroidX library. This <code>migration guide</code> shows you how to migrate your application to AndroidX.</p> <p>Check out the changed dependencies in the  <code>dependencies section</code> or in the <code>build.gradle</code> of the sample application. The mapping for all support libraries is listed in section \"Artifact mappings\" here</p> <p>Dependencies that changed in the SDK: + com.android.support:appcompat-v7:27.1.1 -&gt; androidx.appcompat:appcompat:1.0.0 + com.android.support:cardview-v7:27.1.1 -&gt; androidx.cardview:cardview:1.0.0 + com.android.support:design:27.1.1 -&gt; com.google.android.material:material:1.0.0 - com.android.support:support-v4:27.1.1 -&gt; androidx.legacy:legacy-support-v4:1.0.0 (was merged by AndroidX and can be therefore be fully removed)</p>"},{"location":"transition_guide/#default-settings","title":"Default Settings","text":"<p>The default values for <code>requireVerification</code> and <code>requireFaceMatch</code> were changed to <code>true</code>. Please make sure that they are explicitly set to false in case a scan in Fastfill mode should be performed.</p>"},{"location":"transition_guide/#2130","title":"2.13.0","text":""},{"location":"transition_guide/#api-change-in-netverifydocumentdata","title":"API Change in NetverifyDocumentData","text":"<p>The function <code>getMiddleName()</code> has been removed. If a middle name is available, it will be contained with the first name.</p>"},{"location":"transition_guide/#removed-deprecated-abis-mips-mips64-and-armeabi","title":"Removed Deprecated ABIs mips, mips64 and armeabi","text":"<p>These ABIs were deprecated in recent NDK toolsets as mentioned here - https://developer.android.com/ndk/guides/abis and are not used any more.</p>"},{"location":"transition_guide/#2121","title":"2.12.1","text":""},{"location":"transition_guide/#fixed-a-problem-in-which-the-user-could-get-stuck-in-the-selfie-capturing-process","title":"Fixed a Problem in Which the User Could Get Stuck in the Selfie Capturing Process","text":""},{"location":"transition_guide/#2120","title":"2.12.0","text":""},{"location":"transition_guide/#fallback-for-google-vision-not-operational-added","title":"Fallback for Google Vision Not Operational Added","text":"<p>A fallback to manual image picker will now be used if Google Vision is not operational due to problems on the device. This guarantees the face workflow to be finished despite problems with the availablility of the Google Play services. Details are also described in sub-chapter operationality. The method <code>netverifySDK.isMobileVisionOperational</code> remains in the SDK but doesn't need to be checked now necessarily.</p>"},{"location":"transition_guide/#new-sdk-localizations-added_1","title":"New SDK Localizations Added","text":"<p>In addition to English, the translations for the languages Chinese (Simplified), Dutch, French, German and Spanish have been added.</p>"},{"location":"transition_guide/#remove-unused-strings-for-localization","title":"Remove Unused Strings for Localization","text":"<p>Along with the additional languages, we removed some Strings that were unused in the SDK. The following keys have been removed: <code>netverify_confirmation_snackbar_help_default</code>, <code>netverify_accessibility_select_your_country</code>, <code>netverify_accessibility_action_double_click</code>, <code>netverify_accessibility_select_your_country</code>, <code>netverify_scan_options_country_title</code>, <code>netverify_overlay_liveness_advice</code> and <code>netverify_scan_options_preselected_hint</code>.</p>"},{"location":"transition_guide/#additional-information-method-removed","title":"Additional Information Method Removed","text":"<p>SDK method <code>netverifySDK.setAdditionalInformation</code> has been removed.</p>"},{"location":"transition_guide/#new-callback-in-netverifycustomscaninterface","title":"New Callback in NetverifyCustomScanInterface","text":"<p><code>onNetverifyDisplayBlurHint()</code> was added for custom scan view.</p>"},{"location":"transition_guide/#2110","title":"2.11.0","text":""},{"location":"transition_guide/#new-error-scheme","title":"New Error Scheme","text":"<p>The schema for <code>errorCode</code> changed and it's type is now String instead of Integer. Read more detailed information on this in chapter Error codes</p>"},{"location":"transition_guide/#2101","title":"2.10.1","text":"<p>No backward incompatible changes.</p>"},{"location":"transition_guide/#2100","title":"2.10.0","text":"<ul> <li>SDK updated to Android plugin for gradle 3.0 - https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html</li> <li>Minimum API level was raised from Android 4.1 (API level 16) to Android 4.4 (API level 19)</li> </ul>"},{"location":"transition_guide/#290","title":"2.9.0","text":""},{"location":"transition_guide/#changes-in-sdk-code","title":"Changes in SDK Code","text":"<ul> <li>New cardview dependency was added <code>com.android.support:cardview-v7:26.1.0</code> for the screen redesign. This dependency is mandatory for Netverify</li> <li>Multidex is now mandatory, follow the steps Android Developers guide https://developer.android.com/studio/build/multidex.html#mdex-gradle to enable it if necessary in your app.</li> <li>Additional Proguard rules for the updated Barcode Scanner have to be added:</li> </ul> <pre><code>-keep class com.microblink.** { *; }\n-keep class com.microblink.**$* { *; }\n-dontwarn com.microblink.**\n</code></pre> <ul> <li>SDK method for checking the Google Mobile Vision API operationality was added (see method documentation in NetverifyFragment in the Sample app))</li> </ul> <pre><code>GoogleVisionStatus NetverifySDK.isMobileVisionOperational(Activity activity, int requestCode);\n</code></pre> <p>The usage is explained in the Netverify guide sub-chapter operationality</p>"},{"location":"transition_guide/#changes-in-localizable-strings","title":"Changes in Localizable Strings","text":"<p>Multiple additions and changes in regards to the new selection screen.</p>"},{"location":"transition_guide/#changes-in-customization","title":"Changes in Customization","text":"<p>Additions and changes in regards to the new selection screen (see XML output in Surface Tool). Attributes added for replacing the previous selection screen: <code>netverify_scanOptionsItemHeaderBackground</code>, <code>netverify_scanOptionsItemForeground</code> and <code>netverify_scanOptionsItemBackground</code>.</p>"},{"location":"transition_guide/#280","title":"2.8.0","text":"<ul> <li>Dependency <code>com.jumio.android:nv-liveness:2.8.0@aar</code> is mandatory now.</li> </ul>"},{"location":"transition_guide/#270","title":"2.7.0","text":"<ul> <li>New Dependency <code>com.jumio.android:nv-liveness:2.7.0@aar</code> was added for face-liveness functionality.</li> <li>Dependency <code>com.google.android.gms:play-services-vision</code> is now mandatory required because of added functionality.</li> <li>Change SDK method <code>setEnableEpassport(boolean)</code> to <code>setEnableEMRTD(boolean)</code> because of to the support for NFC ID documents.</li> <li>If the dependencies <code>com.jumio.android:nv-liveness</code> and <code>com.jumio.android:nv-barcode-vision</code> are both used in the application, the following lines have to be added to the application tag in the AndroidManifest.xml to avoid merge issues.</li> </ul> <pre><code>&lt;meta-data\n            android:name=\"com.google.android.gms.vision.DEPENDENCIES\"\n            android:value=\"barcode, face\"\n            tools:replace=\"android:value\"/&gt;\n</code></pre> <ul> <li>Additional Proguard rules for the Samsung Camera SDK have to be added:</li> </ul> <pre><code>-keep class com.samsung.** { *; }\n-keep class com.samsung.**$* { *; }\n-dontwarn com.samsung.**\n</code></pre>"},{"location":"transition_guide/#261","title":"2.6.1","text":"<p>No backward incompatible changes.</p>"},{"location":"transition_guide/#260","title":"2.6.0","text":""},{"location":"transition_guide/#changes-in-sdk-api","title":"Changes in SDK API","text":"<ul> <li>Removed SDK method <code>setShowHelpBeforeScan(boolean)</code> because the collapsed help view is now constantly visible during scanning.</li> <li>Add NetverifySDK method <code>isRooted(Context)</code> for device root-check before starting the SDK</li> </ul>"},{"location":"transition_guide/#changes-in-localizable-strings_1","title":"Changes in Localizable Strings","text":"<p>Multiple additions and changes in regards to the new guidance / help screen.</p>"},{"location":"transition_guide/#changes-in-customization_1","title":"Changes in Customization","text":"<p>Additions and changes in regards to the new guidance / help screen.</p>"},{"location":"transition_guide/#250","title":"2.5.0","text":"<p>No backward incompatible changes.</p>"},{"location":"transition_guide/#240","title":"2.4.0","text":""},{"location":"transition_guide/#remove-okhttp","title":"Remove okHttp","text":"<p>The build.gradle was adapted to support standard UrlConnection for replacing okHttp</p>"},{"location":"transition_guide/#changes-in-customization_2","title":"Changes in Customization","text":"<p>Override the theme that is used for Netverify in the manifest by calling <code>netverifySDK.setCustomTheme(CUSTOMTHEMEID)</code>. Use the resource id of a customized theme that uses <code>Theme.Netverify</code> as parent. Additions and changes for customization options for the launch of the surface tool.</p>"},{"location":"transition_guide/#provide-possibility-to-avoid-loading-spinner-after-sdk-start","title":"Provide Possibility to Avoid Loading Spinner After SDK Start","text":"<p>Use the following method to initialize the SDK before displaying it <code>netverifySDK.initiate(new NetverifyInitiateCallback() {  @Override  public void onNetverifyInitiateSuccess() {  }  @Override  public void onNetverifyInitiateError(int errorCode, int errorDetail, String errorMessage, boolean retryPossible) {  } });</code></p>"},{"location":"transition_guide/#removed-name-match-feature","title":"Removed Name Match Feature","text":"<p>Name matching by comparing a provided name with the extracted name from a document was removed. The method <code>setName(\"FIRSTNAME LASTNAME\")</code> in the NetverifySDK was removed.</p>"},{"location":"transition_guide/#230","title":"2.3.0","text":""},{"location":"transition_guide/#changes-in-customization_3","title":"Changes in Customization","text":"<p>Additions for the customization options to support the configuration of all scan overlays.</p>"},{"location":"transition_guide/#copyright","title":"Copyright","text":"<p>\u00a9 Jumio Corp. 395 Page Mill Road, Palo Alto, CA 94306</p>"}]}